Nonterminals useless in grammar

    and_or


Terminals unused in grammar

    ELIF


Rules useless in grammar

  113 and_or: AND
  114       | OR


State 4 conflicts: 12 reduce/reduce
State 30 conflicts: 1 shift/reduce
State 58 conflicts: 1 shift/reduce
State 90 conflicts: 1 reduce/reduce
State 91 conflicts: 1 reduce/reduce
State 94 conflicts: 4 reduce/reduce
State 95 conflicts: 4 reduce/reduce
State 164 conflicts: 2 shift/reduce
State 165 conflicts: 2 shift/reduce
State 184 conflicts: 2 reduce/reduce


Grammar

    0 $accept: main $end

    1 main: importList body

    2 importList: imports importList
    3           | imports
    4           | ε

    5 imports: IMPORT '{' moduleList '}' FROM STRINGVALUE ';'
    6        | IMPORT '{' modules '}' AS IDENTIFIER FROM STRINGVALUE ';'
    7        | IMPORT moduleList FROM STRINGVALUE ';'
    8        | IMPORT modules AS IDENTIFIER FROM STRINGVALUE ';'

    9 moduleList: moduleList ',' moduleList
   10           | modules

   11 modules: IDENTIFIER
   12        | MULT

   13 body: block body
   14     | ε

   15 block: function
   16      | procedure

   17 $@1: ε

   18 $@2: ε

   19 block: WHILE $@1 '(' condition ')' $@2 '{' body '}'

   20 $@3: ε

   21 $@4: ε

   22 block: FOR $@3 '(' statement ';' condition $@4 ';' statement ')' '{' body '}'

   23 $@5: ε

   24 $@6: ε

   25 $@7: ε

   26 block: IF $@5 '(' condition ')' $@6 '{' body '}' $@7 else
   27      | statement ';'

   28 $@8: ε

   29 block: CONSOLELOG $@8 '(' console_outputs ')' ';'

   30 console_outputs: STRINGVALUE
   31                | IDENTIFIER
   32                | expression

   33 $@9: ε

   34 $@10: ε

   35 function: FUNCTION $@9 IDENTIFIER $@10 '(' parameterList ')' '{' body return '}'

   36 procedure: IDENTIFIER '(' argumentList ')' ';'

   37 argumentList: argument ',' argumentList
   38             | argument
   39             | ε

   40 $@11: ε

   41 argument: IDENTIFIER $@11

   42 parameterList: parameter ',' parameterList
   43              | parameter
   44              | ε

   45 $@12: ε

   46 $@13: ε

   47 parameter: IDENTIFIER $@12 ':' datatype $@13

   48 datatype: NUMBERTYPE
   49         | STRINGTYPE
   50         | BOOLEANTYPE

   51 $@14: ε

   52 else: ELSE $@14 '{' body '}'
   53     | ε

   54 M: ε

   55 condition: condition AND M condition
   56          | condition OR M condition
   57          | value relop value
   58          | '(' condition ')'
   59          | value

   60 $@15: ε

   61 condition: TRUE $@15

   62 $@16: ε

   63 condition: FALSE $@16

   64 $@17: ε

   65 $@18: ε

   66 statement: declaration IDENTIFIER $@17 ':' datatype $@18 init
   67          | IDENTIFIER '=' expression
   68          | IDENTIFIER relop expression
   69          | IDENTIFIER INC
   70          | IDENTIFIER DEC
   71          | INC IDENTIFIER
   72          | DEC IDENTIFIER

   73 declaration: LET
   74            | VAR
   75            | CONST

   76 init: '=' value
   77     | '=' expression
   78     | ε

   79 expression: expression addops term
   80           | term

   81 term: term mulops factor
   82     | factor

   83 factor: base exponent base
   84       | LOG '(' value ',' value ')'
   85       | base

   86 base: value
   87     | '(' expression ')'

   88 exponent: POW

   89 mulops: MULT
   90       | DIV

   91 addops: ADD
   92       | SUB

   93 relop: LT
   94      | GT
   95      | LE
   96      | GE
   97      | EQ
   98      | NE

   99 number: INTEGER
  100       | FLOAT

  101 value: number
  102      | IDENTIFIER
  103      | STRINGVALUE

  104 $@19: ε

  105 value: TRUE $@19

  106 $@20: ε

  107 value: FALSE $@20

  108 $@21: ε

  109 value: SCAN $@21 '(' ')'

  110 $@22: ε

  111 return: RETURN $@22 value ';'
  112       | ε


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 19 22 26 29 35 36 58 84 87 109
    ')' (41) 19 22 26 29 35 36 58 84 87 109
    ',' (44) 9 37 42 84
    ':' (58) 47 66
    ';' (59) 5 6 7 8 22 27 29 36 111
    '=' (61) 67 76 77
    '{' (123) 5 6 19 22 26 35 52
    '}' (125) 5 6 19 22 26 35 52
    error (256)
    IMPORT <treeNode> (258) 5 6 7 8
    FROM <treeNode> (259) 5 6 7 8
    AS <treeNode> (260) 6 8
    CONSOLELOG <treeNode> (261) 29
    SCAN <treeNode> (262) 109
    IF <treeNode> (263) 26
    WHILE <treeNode> (264) 19
    ELSE <treeNode> (265) 52
    RETURN <treeNode> (266) 111
    ELIF <treeNode> (267)
    LET <treeNode> (268) 73
    VAR <treeNode> (269) 74
    CONST <treeNode> (270) 75
    ADD <treeNode> (271) 91
    SUB <treeNode> (272) 92
    MULT <treeNode> (273) 12 89
    DIV <treeNode> (274) 90
    LOG <treeNode> (275) 84
    GE <treeNode> (276) 96
    LE <treeNode> (277) 95
    GT <treeNode> (278) 94
    LT <treeNode> (279) 93
    EQ <treeNode> (280) 97
    NE <treeNode> (281) 98
    TRUE <treeNode> (282) 61 105
    FALSE <treeNode> (283) 63 107
    AND <treeNode> (284) 55
    OR <treeNode> (285) 56
    NUMBERTYPE <treeNode> (286) 48
    STRINGTYPE <treeNode> (287) 49
    BOOLEANTYPE <treeNode> (288) 50
    FUNCTION <treeNode> (289) 35
    INTEGER <treeNode> (290) 99
    FLOAT <treeNode> (291) 100
    STRINGVALUE <treeNode> (292) 5 6 7 8 30 103
    INC <treeNode> (293) 69 71
    DEC <treeNode> (294) 70 72
    FOR <treeNode> (295) 22
    POW <treeNode2> (296) 88
    IDENTIFIER <treeNode2> (297) 6 8 11 31 35 36 41 47 66 67 68 69 70 71 72 102


Nonterminals, with rules where they appear

    $accept (51)
        on left: 0
    main <treeNode> (52)
        on left: 1
        on right: 0
    importList <treeNode> (53)
        on left: 2 3 4
        on right: 1 2
    imports <treeNode> (54)
        on left: 5 6 7 8
        on right: 2 3
    moduleList <treeNode> (55)
        on left: 9 10
        on right: 5 7 9
    modules <treeNode> (56)
        on left: 11 12
        on right: 6 8 10
    body <treeNode> (57)
        on left: 13 14
        on right: 1 13 19 22 26 35 52
    block <treeNode> (58)
        on left: 15 16 19 22 26 27 29
        on right: 13
    $@1 (59)
        on left: 17
        on right: 19
    $@2 (60)
        on left: 18
        on right: 19
    $@3 (61)
        on left: 20
        on right: 22
    $@4 (62)
        on left: 21
        on right: 22
    $@5 (63)
        on left: 23
        on right: 26
    $@6 (64)
        on left: 24
        on right: 26
    $@7 (65)
        on left: 25
        on right: 26
    $@8 (66)
        on left: 28
        on right: 29
    console_outputs <treeNode> (67)
        on left: 30 31 32
        on right: 29
    function <treeNode2> (68)
        on left: 35
        on right: 15
    $@9 (69)
        on left: 33
        on right: 35
    $@10 (70)
        on left: 34
        on right: 35
    procedure <treeNode2> (71)
        on left: 36
        on right: 16
    argumentList <treeNode> (72)
        on left: 37 38 39
        on right: 36 37
    argument <treeNode> (73)
        on left: 41
        on right: 37 38
    $@11 (74)
        on left: 40
        on right: 41
    parameterList <treeNode> (75)
        on left: 42 43 44
        on right: 35 42
    parameter <treeNode> (76)
        on left: 47
        on right: 42 43
    $@12 (77)
        on left: 45
        on right: 47
    $@13 (78)
        on left: 46
        on right: 47
    datatype <treeNode> (79)
        on left: 48 49 50
        on right: 47 66
    else <treeNode> (80)
        on left: 52 53
        on right: 26
    $@14 (81)
        on left: 51
        on right: 52
    M <treeNode4> (82)
        on left: 54
        on right: 55 56
    condition <treeNode3> (83)
        on left: 55 56 57 58 59 61 63
        on right: 19 22 26 55 56 58
    $@15 (84)
        on left: 60
        on right: 61
    $@16 (85)
        on left: 62
        on right: 63
    statement <treeNode> (86)
        on left: 66 67 68 69 70 71 72
        on right: 22 27
    $@17 (87)
        on left: 64
        on right: 66
    $@18 (88)
        on left: 65
        on right: 66
    declaration <treeNode> (89)
        on left: 73 74 75
        on right: 66
    init <treeNode2> (90)
        on left: 76 77 78
        on right: 66
    expression <treeNode2> (91)
        on left: 79 80
        on right: 32 67 68 77 79 87
    term <treeNode2> (92)
        on left: 81 82
        on right: 79 80 81
    factor <treeNode2> (93)
        on left: 83 84 85
        on right: 81 82
    base <treeNode2> (94)
        on left: 86 87
        on right: 83 85
    exponent <treeNode2> (95)
        on left: 88
        on right: 83
    mulops <treeNode> (96)
        on left: 89 90
        on right: 81
    addops <treeNode> (97)
        on left: 91 92
        on right: 79
    relop <treeNode> (98)
        on left: 93 94 95 96 97 98
        on right: 57 68
    number <treeNode2> (99)
        on left: 99 100
        on right: 101
    value <treeNode2> (100)
        on left: 101 102 103 105 107 109
        on right: 57 59 76 84 86 111
    $@19 (101)
        on left: 104
        on right: 105
    $@20 (102)
        on left: 106
        on right: 107
    $@21 (103)
        on left: 108
        on right: 109
    return <treeNode> (104)
        on left: 111 112
        on right: 35
    $@22 (105)
        on left: 110
        on right: 111


State 0

    0 $accept: • main $end

    IMPORT  shift, and go to state 1

    $default  reduce using rule 4 (importList)

    main        go to state 2
    importList  go to state 3
    imports     go to state 4


State 1

    5 imports: IMPORT • '{' moduleList '}' FROM STRINGVALUE ';'
    6        | IMPORT • '{' modules '}' AS IDENTIFIER FROM STRINGVALUE ';'
    7        | IMPORT • moduleList FROM STRINGVALUE ';'
    8        | IMPORT • modules AS IDENTIFIER FROM STRINGVALUE ';'

    MULT        shift, and go to state 5
    IDENTIFIER  shift, and go to state 6
    '{'         shift, and go to state 7

    moduleList  go to state 8
    modules     go to state 9


State 2

    0 $accept: main • $end

    $end  shift, and go to state 10


State 3

    1 main: importList • body

    CONSOLELOG  shift, and go to state 11
    IF          shift, and go to state 12
    WHILE       shift, and go to state 13
    LET         shift, and go to state 14
    VAR         shift, and go to state 15
    CONST       shift, and go to state 16
    FUNCTION    shift, and go to state 17
    INC         shift, and go to state 18
    DEC         shift, and go to state 19
    FOR         shift, and go to state 20
    IDENTIFIER  shift, and go to state 21

    $default  reduce using rule 14 (body)

    body         go to state 22
    block        go to state 23
    function     go to state 24
    procedure    go to state 25
    statement    go to state 26
    declaration  go to state 27


State 4

    2 importList: imports • importList
    3           | imports •

    IMPORT  shift, and go to state 1

    $end        reduce using rule 3 (importList)
    $end        [reduce using rule 4 (importList)]
    CONSOLELOG  reduce using rule 3 (importList)
    CONSOLELOG  [reduce using rule 4 (importList)]
    IF          reduce using rule 3 (importList)
    IF          [reduce using rule 4 (importList)]
    WHILE       reduce using rule 3 (importList)
    WHILE       [reduce using rule 4 (importList)]
    LET         reduce using rule 3 (importList)
    LET         [reduce using rule 4 (importList)]
    VAR         reduce using rule 3 (importList)
    VAR         [reduce using rule 4 (importList)]
    CONST       reduce using rule 3 (importList)
    CONST       [reduce using rule 4 (importList)]
    FUNCTION    reduce using rule 3 (importList)
    FUNCTION    [reduce using rule 4 (importList)]
    INC         reduce using rule 3 (importList)
    INC         [reduce using rule 4 (importList)]
    DEC         reduce using rule 3 (importList)
    DEC         [reduce using rule 4 (importList)]
    FOR         reduce using rule 3 (importList)
    FOR         [reduce using rule 4 (importList)]
    IDENTIFIER  reduce using rule 3 (importList)
    IDENTIFIER  [reduce using rule 4 (importList)]
    $default    reduce using rule 3 (importList)

    importList  go to state 28
    imports     go to state 4


State 5

   12 modules: MULT •

    $default  reduce using rule 12 (modules)


State 6

   11 modules: IDENTIFIER •

    $default  reduce using rule 11 (modules)


State 7

    5 imports: IMPORT '{' • moduleList '}' FROM STRINGVALUE ';'
    6        | IMPORT '{' • modules '}' AS IDENTIFIER FROM STRINGVALUE ';'

    MULT        shift, and go to state 5
    IDENTIFIER  shift, and go to state 6

    moduleList  go to state 29
    modules     go to state 30


State 8

    7 imports: IMPORT moduleList • FROM STRINGVALUE ';'
    9 moduleList: moduleList • ',' moduleList

    FROM  shift, and go to state 31
    ','   shift, and go to state 32


State 9

    8 imports: IMPORT modules • AS IDENTIFIER FROM STRINGVALUE ';'
   10 moduleList: modules •

    AS  shift, and go to state 33

    $default  reduce using rule 10 (moduleList)


State 10

    0 $accept: main $end •

    $default  accept


State 11

   29 block: CONSOLELOG • $@8 '(' console_outputs ')' ';'

    $default  reduce using rule 28 ($@8)

    $@8  go to state 34


State 12

   26 block: IF • $@5 '(' condition ')' $@6 '{' body '}' $@7 else

    $default  reduce using rule 23 ($@5)

    $@5  go to state 35


State 13

   19 block: WHILE • $@1 '(' condition ')' $@2 '{' body '}'

    $default  reduce using rule 17 ($@1)

    $@1  go to state 36


State 14

   73 declaration: LET •

    $default  reduce using rule 73 (declaration)


State 15

   74 declaration: VAR •

    $default  reduce using rule 74 (declaration)


State 16

   75 declaration: CONST •

    $default  reduce using rule 75 (declaration)


State 17

   35 function: FUNCTION • $@9 IDENTIFIER $@10 '(' parameterList ')' '{' body return '}'

    $default  reduce using rule 33 ($@9)

    $@9  go to state 37


State 18

   71 statement: INC • IDENTIFIER

    IDENTIFIER  shift, and go to state 38


State 19

   72 statement: DEC • IDENTIFIER

    IDENTIFIER  shift, and go to state 39


State 20

   22 block: FOR • $@3 '(' statement ';' condition $@4 ';' statement ')' '{' body '}'

    $default  reduce using rule 20 ($@3)

    $@3  go to state 40


State 21

   36 procedure: IDENTIFIER • '(' argumentList ')' ';'
   67 statement: IDENTIFIER • '=' expression
   68          | IDENTIFIER • relop expression
   69          | IDENTIFIER • INC
   70          | IDENTIFIER • DEC

    GE   shift, and go to state 41
    LE   shift, and go to state 42
    GT   shift, and go to state 43
    LT   shift, and go to state 44
    EQ   shift, and go to state 45
    NE   shift, and go to state 46
    INC  shift, and go to state 47
    DEC  shift, and go to state 48
    '('  shift, and go to state 49
    '='  shift, and go to state 50

    relop  go to state 51


State 22

    1 main: importList body •

    $default  reduce using rule 1 (main)


State 23

   13 body: block • body

    CONSOLELOG  shift, and go to state 11
    IF          shift, and go to state 12
    WHILE       shift, and go to state 13
    LET         shift, and go to state 14
    VAR         shift, and go to state 15
    CONST       shift, and go to state 16
    FUNCTION    shift, and go to state 17
    INC         shift, and go to state 18
    DEC         shift, and go to state 19
    FOR         shift, and go to state 20
    IDENTIFIER  shift, and go to state 21

    $default  reduce using rule 14 (body)

    body         go to state 52
    block        go to state 23
    function     go to state 24
    procedure    go to state 25
    statement    go to state 26
    declaration  go to state 27


State 24

   15 block: function •

    $default  reduce using rule 15 (block)


State 25

   16 block: procedure •

    $default  reduce using rule 16 (block)


State 26

   27 block: statement • ';'

    ';'  shift, and go to state 53


State 27

   66 statement: declaration • IDENTIFIER $@17 ':' datatype $@18 init

    IDENTIFIER  shift, and go to state 54


State 28

    2 importList: imports importList •

    $default  reduce using rule 2 (importList)


State 29

    5 imports: IMPORT '{' moduleList • '}' FROM STRINGVALUE ';'
    9 moduleList: moduleList • ',' moduleList

    '}'  shift, and go to state 55
    ','  shift, and go to state 32


State 30

    6 imports: IMPORT '{' modules • '}' AS IDENTIFIER FROM STRINGVALUE ';'
   10 moduleList: modules •

    '}'  shift, and go to state 56

    '}'       [reduce using rule 10 (moduleList)]
    $default  reduce using rule 10 (moduleList)


State 31

    7 imports: IMPORT moduleList FROM • STRINGVALUE ';'

    STRINGVALUE  shift, and go to state 57


State 32

    9 moduleList: moduleList ',' • moduleList

    MULT        shift, and go to state 5
    IDENTIFIER  shift, and go to state 6

    moduleList  go to state 58
    modules     go to state 59


State 33

    8 imports: IMPORT modules AS • IDENTIFIER FROM STRINGVALUE ';'

    IDENTIFIER  shift, and go to state 60


State 34

   29 block: CONSOLELOG $@8 • '(' console_outputs ')' ';'

    '('  shift, and go to state 61


State 35

   26 block: IF $@5 • '(' condition ')' $@6 '{' body '}' $@7 else

    '('  shift, and go to state 62


State 36

   19 block: WHILE $@1 • '(' condition ')' $@2 '{' body '}'

    '('  shift, and go to state 63


State 37

   35 function: FUNCTION $@9 • IDENTIFIER $@10 '(' parameterList ')' '{' body return '}'

    IDENTIFIER  shift, and go to state 64


State 38

   71 statement: INC IDENTIFIER •

    $default  reduce using rule 71 (statement)


State 39

   72 statement: DEC IDENTIFIER •

    $default  reduce using rule 72 (statement)


State 40

   22 block: FOR $@3 • '(' statement ';' condition $@4 ';' statement ')' '{' body '}'

    '('  shift, and go to state 65


State 41

   96 relop: GE •

    $default  reduce using rule 96 (relop)


State 42

   95 relop: LE •

    $default  reduce using rule 95 (relop)


State 43

   94 relop: GT •

    $default  reduce using rule 94 (relop)


State 44

   93 relop: LT •

    $default  reduce using rule 93 (relop)


State 45

   97 relop: EQ •

    $default  reduce using rule 97 (relop)


State 46

   98 relop: NE •

    $default  reduce using rule 98 (relop)


State 47

   69 statement: IDENTIFIER INC •

    $default  reduce using rule 69 (statement)


State 48

   70 statement: IDENTIFIER DEC •

    $default  reduce using rule 70 (statement)


State 49

   36 procedure: IDENTIFIER '(' • argumentList ')' ';'

    IDENTIFIER  shift, and go to state 66

    $default  reduce using rule 39 (argumentList)

    argumentList  go to state 67
    argument      go to state 68


State 50

   67 statement: IDENTIFIER '=' • expression

    SCAN         shift, and go to state 69
    LOG          shift, and go to state 70
    TRUE         shift, and go to state 71
    FALSE        shift, and go to state 72
    INTEGER      shift, and go to state 73
    FLOAT        shift, and go to state 74
    STRINGVALUE  shift, and go to state 75
    IDENTIFIER   shift, and go to state 76
    '('          shift, and go to state 77

    expression  go to state 78
    term        go to state 79
    factor      go to state 80
    base        go to state 81
    number      go to state 82
    value       go to state 83


State 51

   68 statement: IDENTIFIER relop • expression

    SCAN         shift, and go to state 69
    LOG          shift, and go to state 70
    TRUE         shift, and go to state 71
    FALSE        shift, and go to state 72
    INTEGER      shift, and go to state 73
    FLOAT        shift, and go to state 74
    STRINGVALUE  shift, and go to state 75
    IDENTIFIER   shift, and go to state 76
    '('          shift, and go to state 77

    expression  go to state 84
    term        go to state 79
    factor      go to state 80
    base        go to state 81
    number      go to state 82
    value       go to state 83


State 52

   13 body: block body •

    $default  reduce using rule 13 (body)


State 53

   27 block: statement ';' •

    $default  reduce using rule 27 (block)


State 54

   66 statement: declaration IDENTIFIER • $@17 ':' datatype $@18 init

    $default  reduce using rule 64 ($@17)

    $@17  go to state 85


State 55

    5 imports: IMPORT '{' moduleList '}' • FROM STRINGVALUE ';'

    FROM  shift, and go to state 86


State 56

    6 imports: IMPORT '{' modules '}' • AS IDENTIFIER FROM STRINGVALUE ';'

    AS  shift, and go to state 87


State 57

    7 imports: IMPORT moduleList FROM STRINGVALUE • ';'

    ';'  shift, and go to state 88


State 58

    9 moduleList: moduleList • ',' moduleList
    9           | moduleList ',' moduleList •

    ','  shift, and go to state 32

    ','       [reduce using rule 9 (moduleList)]
    $default  reduce using rule 9 (moduleList)


State 59

   10 moduleList: modules •

    $default  reduce using rule 10 (moduleList)


State 60

    8 imports: IMPORT modules AS IDENTIFIER • FROM STRINGVALUE ';'

    FROM  shift, and go to state 89


State 61

   29 block: CONSOLELOG $@8 '(' • console_outputs ')' ';'

    SCAN         shift, and go to state 69
    LOG          shift, and go to state 70
    TRUE         shift, and go to state 71
    FALSE        shift, and go to state 72
    INTEGER      shift, and go to state 73
    FLOAT        shift, and go to state 74
    STRINGVALUE  shift, and go to state 90
    IDENTIFIER   shift, and go to state 91
    '('          shift, and go to state 77

    console_outputs  go to state 92
    expression       go to state 93
    term             go to state 79
    factor           go to state 80
    base             go to state 81
    number           go to state 82
    value            go to state 83


State 62

   26 block: IF $@5 '(' • condition ')' $@6 '{' body '}' $@7 else

    SCAN         shift, and go to state 69
    TRUE         shift, and go to state 94
    FALSE        shift, and go to state 95
    INTEGER      shift, and go to state 73
    FLOAT        shift, and go to state 74
    STRINGVALUE  shift, and go to state 75
    IDENTIFIER   shift, and go to state 76
    '('          shift, and go to state 96

    condition  go to state 97
    number     go to state 82
    value      go to state 98


State 63

   19 block: WHILE $@1 '(' • condition ')' $@2 '{' body '}'

    SCAN         shift, and go to state 69
    TRUE         shift, and go to state 94
    FALSE        shift, and go to state 95
    INTEGER      shift, and go to state 73
    FLOAT        shift, and go to state 74
    STRINGVALUE  shift, and go to state 75
    IDENTIFIER   shift, and go to state 76
    '('          shift, and go to state 96

    condition  go to state 99
    number     go to state 82
    value      go to state 98


State 64

   35 function: FUNCTION $@9 IDENTIFIER • $@10 '(' parameterList ')' '{' body return '}'

    $default  reduce using rule 34 ($@10)

    $@10  go to state 100


State 65

   22 block: FOR $@3 '(' • statement ';' condition $@4 ';' statement ')' '{' body '}'

    LET         shift, and go to state 14
    VAR         shift, and go to state 15
    CONST       shift, and go to state 16
    INC         shift, and go to state 18
    DEC         shift, and go to state 19
    IDENTIFIER  shift, and go to state 101

    statement    go to state 102
    declaration  go to state 27


State 66

   41 argument: IDENTIFIER • $@11

    $default  reduce using rule 40 ($@11)

    $@11  go to state 103


State 67

   36 procedure: IDENTIFIER '(' argumentList • ')' ';'

    ')'  shift, and go to state 104


State 68

   37 argumentList: argument • ',' argumentList
   38             | argument •

    ','  shift, and go to state 105

    $default  reduce using rule 38 (argumentList)


State 69

  109 value: SCAN • $@21 '(' ')'

    $default  reduce using rule 108 ($@21)

    $@21  go to state 106


State 70

   84 factor: LOG • '(' value ',' value ')'

    '('  shift, and go to state 107


State 71

  105 value: TRUE • $@19

    $default  reduce using rule 104 ($@19)

    $@19  go to state 108


State 72

  107 value: FALSE • $@20

    $default  reduce using rule 106 ($@20)

    $@20  go to state 109


State 73

   99 number: INTEGER •

    $default  reduce using rule 99 (number)


State 74

  100 number: FLOAT •

    $default  reduce using rule 100 (number)


State 75

  103 value: STRINGVALUE •

    $default  reduce using rule 103 (value)


State 76

  102 value: IDENTIFIER •

    $default  reduce using rule 102 (value)


State 77

   87 base: '(' • expression ')'

    SCAN         shift, and go to state 69
    LOG          shift, and go to state 70
    TRUE         shift, and go to state 71
    FALSE        shift, and go to state 72
    INTEGER      shift, and go to state 73
    FLOAT        shift, and go to state 74
    STRINGVALUE  shift, and go to state 75
    IDENTIFIER   shift, and go to state 76
    '('          shift, and go to state 77

    expression  go to state 110
    term        go to state 79
    factor      go to state 80
    base        go to state 81
    number      go to state 82
    value       go to state 83


State 78

   67 statement: IDENTIFIER '=' expression •
   79 expression: expression • addops term

    ADD  shift, and go to state 111
    SUB  shift, and go to state 112

    $default  reduce using rule 67 (statement)

    addops  go to state 113


State 79

   80 expression: term •
   81 term: term • mulops factor

    MULT  shift, and go to state 114
    DIV   shift, and go to state 115

    $default  reduce using rule 80 (expression)

    mulops  go to state 116


State 80

   82 term: factor •

    $default  reduce using rule 82 (term)


State 81

   83 factor: base • exponent base
   85       | base •

    POW  shift, and go to state 117

    $default  reduce using rule 85 (factor)

    exponent  go to state 118


State 82

  101 value: number •

    $default  reduce using rule 101 (value)


State 83

   86 base: value •

    $default  reduce using rule 86 (base)


State 84

   68 statement: IDENTIFIER relop expression •
   79 expression: expression • addops term

    ADD  shift, and go to state 111
    SUB  shift, and go to state 112

    $default  reduce using rule 68 (statement)

    addops  go to state 113


State 85

   66 statement: declaration IDENTIFIER $@17 • ':' datatype $@18 init

    ':'  shift, and go to state 119


State 86

    5 imports: IMPORT '{' moduleList '}' FROM • STRINGVALUE ';'

    STRINGVALUE  shift, and go to state 120


State 87

    6 imports: IMPORT '{' modules '}' AS • IDENTIFIER FROM STRINGVALUE ';'

    IDENTIFIER  shift, and go to state 121


State 88

    7 imports: IMPORT moduleList FROM STRINGVALUE ';' •

    $default  reduce using rule 7 (imports)


State 89

    8 imports: IMPORT modules AS IDENTIFIER FROM • STRINGVALUE ';'

    STRINGVALUE  shift, and go to state 122


State 90

   30 console_outputs: STRINGVALUE •
  103 value: STRINGVALUE •

    ')'       reduce using rule 30 (console_outputs)
    ')'       [reduce using rule 103 (value)]
    $default  reduce using rule 103 (value)


State 91

   31 console_outputs: IDENTIFIER •
  102 value: IDENTIFIER •

    ')'       reduce using rule 31 (console_outputs)
    ')'       [reduce using rule 102 (value)]
    $default  reduce using rule 102 (value)


State 92

   29 block: CONSOLELOG $@8 '(' console_outputs • ')' ';'

    ')'  shift, and go to state 123


State 93

   32 console_outputs: expression •
   79 expression: expression • addops term

    ADD  shift, and go to state 111
    SUB  shift, and go to state 112

    $default  reduce using rule 32 (console_outputs)

    addops  go to state 113


State 94

   61 condition: TRUE • $@15
  105 value: TRUE • $@19

    AND       reduce using rule 60 ($@15)
    AND       [reduce using rule 104 ($@19)]
    OR        reduce using rule 60 ($@15)
    OR        [reduce using rule 104 ($@19)]
    ';'       reduce using rule 60 ($@15)
    ';'       [reduce using rule 104 ($@19)]
    ')'       reduce using rule 60 ($@15)
    ')'       [reduce using rule 104 ($@19)]
    $default  reduce using rule 104 ($@19)

    $@15  go to state 124
    $@19  go to state 108


State 95

   63 condition: FALSE • $@16
  107 value: FALSE • $@20

    AND       reduce using rule 62 ($@16)
    AND       [reduce using rule 106 ($@20)]
    OR        reduce using rule 62 ($@16)
    OR        [reduce using rule 106 ($@20)]
    ';'       reduce using rule 62 ($@16)
    ';'       [reduce using rule 106 ($@20)]
    ')'       reduce using rule 62 ($@16)
    ')'       [reduce using rule 106 ($@20)]
    $default  reduce using rule 106 ($@20)

    $@16  go to state 125
    $@20  go to state 109


State 96

   58 condition: '(' • condition ')'

    SCAN         shift, and go to state 69
    TRUE         shift, and go to state 94
    FALSE        shift, and go to state 95
    INTEGER      shift, and go to state 73
    FLOAT        shift, and go to state 74
    STRINGVALUE  shift, and go to state 75
    IDENTIFIER   shift, and go to state 76
    '('          shift, and go to state 96

    condition  go to state 126
    number     go to state 82
    value      go to state 98


State 97

   26 block: IF $@5 '(' condition • ')' $@6 '{' body '}' $@7 else
   55 condition: condition • AND M condition
   56          | condition • OR M condition

    AND  shift, and go to state 127
    OR   shift, and go to state 128
    ')'  shift, and go to state 129


State 98

   57 condition: value • relop value
   59          | value •

    GE  shift, and go to state 41
    LE  shift, and go to state 42
    GT  shift, and go to state 43
    LT  shift, and go to state 44
    EQ  shift, and go to state 45
    NE  shift, and go to state 46

    $default  reduce using rule 59 (condition)

    relop  go to state 130


State 99

   19 block: WHILE $@1 '(' condition • ')' $@2 '{' body '}'
   55 condition: condition • AND M condition
   56          | condition • OR M condition

    AND  shift, and go to state 127
    OR   shift, and go to state 128
    ')'  shift, and go to state 131


State 100

   35 function: FUNCTION $@9 IDENTIFIER $@10 • '(' parameterList ')' '{' body return '}'

    '('  shift, and go to state 132


State 101

   67 statement: IDENTIFIER • '=' expression
   68          | IDENTIFIER • relop expression
   69          | IDENTIFIER • INC
   70          | IDENTIFIER • DEC

    GE   shift, and go to state 41
    LE   shift, and go to state 42
    GT   shift, and go to state 43
    LT   shift, and go to state 44
    EQ   shift, and go to state 45
    NE   shift, and go to state 46
    INC  shift, and go to state 47
    DEC  shift, and go to state 48
    '='  shift, and go to state 50

    relop  go to state 51


State 102

   22 block: FOR $@3 '(' statement • ';' condition $@4 ';' statement ')' '{' body '}'

    ';'  shift, and go to state 133


State 103

   41 argument: IDENTIFIER $@11 •

    $default  reduce using rule 41 (argument)


State 104

   36 procedure: IDENTIFIER '(' argumentList ')' • ';'

    ';'  shift, and go to state 134


State 105

   37 argumentList: argument ',' • argumentList

    IDENTIFIER  shift, and go to state 66

    $default  reduce using rule 39 (argumentList)

    argumentList  go to state 135
    argument      go to state 68


State 106

  109 value: SCAN $@21 • '(' ')'

    '('  shift, and go to state 136


State 107

   84 factor: LOG '(' • value ',' value ')'

    SCAN         shift, and go to state 69
    TRUE         shift, and go to state 71
    FALSE        shift, and go to state 72
    INTEGER      shift, and go to state 73
    FLOAT        shift, and go to state 74
    STRINGVALUE  shift, and go to state 75
    IDENTIFIER   shift, and go to state 76

    number  go to state 82
    value   go to state 137


State 108

  105 value: TRUE $@19 •

    $default  reduce using rule 105 (value)


State 109

  107 value: FALSE $@20 •

    $default  reduce using rule 107 (value)


State 110

   79 expression: expression • addops term
   87 base: '(' expression • ')'

    ADD  shift, and go to state 111
    SUB  shift, and go to state 112
    ')'  shift, and go to state 138

    addops  go to state 113


State 111

   91 addops: ADD •

    $default  reduce using rule 91 (addops)


State 112

   92 addops: SUB •

    $default  reduce using rule 92 (addops)


State 113

   79 expression: expression addops • term

    SCAN         shift, and go to state 69
    LOG          shift, and go to state 70
    TRUE         shift, and go to state 71
    FALSE        shift, and go to state 72
    INTEGER      shift, and go to state 73
    FLOAT        shift, and go to state 74
    STRINGVALUE  shift, and go to state 75
    IDENTIFIER   shift, and go to state 76
    '('          shift, and go to state 77

    term    go to state 139
    factor  go to state 80
    base    go to state 81
    number  go to state 82
    value   go to state 83


State 114

   89 mulops: MULT •

    $default  reduce using rule 89 (mulops)


State 115

   90 mulops: DIV •

    $default  reduce using rule 90 (mulops)


State 116

   81 term: term mulops • factor

    SCAN         shift, and go to state 69
    LOG          shift, and go to state 70
    TRUE         shift, and go to state 71
    FALSE        shift, and go to state 72
    INTEGER      shift, and go to state 73
    FLOAT        shift, and go to state 74
    STRINGVALUE  shift, and go to state 75
    IDENTIFIER   shift, and go to state 76
    '('          shift, and go to state 77

    factor  go to state 140
    base    go to state 81
    number  go to state 82
    value   go to state 83


State 117

   88 exponent: POW •

    $default  reduce using rule 88 (exponent)


State 118

   83 factor: base exponent • base

    SCAN         shift, and go to state 69
    TRUE         shift, and go to state 71
    FALSE        shift, and go to state 72
    INTEGER      shift, and go to state 73
    FLOAT        shift, and go to state 74
    STRINGVALUE  shift, and go to state 75
    IDENTIFIER   shift, and go to state 76
    '('          shift, and go to state 77

    base    go to state 141
    number  go to state 82
    value   go to state 83


State 119

   66 statement: declaration IDENTIFIER $@17 ':' • datatype $@18 init

    NUMBERTYPE   shift, and go to state 142
    STRINGTYPE   shift, and go to state 143
    BOOLEANTYPE  shift, and go to state 144

    datatype  go to state 145


State 120

    5 imports: IMPORT '{' moduleList '}' FROM STRINGVALUE • ';'

    ';'  shift, and go to state 146


State 121

    6 imports: IMPORT '{' modules '}' AS IDENTIFIER • FROM STRINGVALUE ';'

    FROM  shift, and go to state 147


State 122

    8 imports: IMPORT modules AS IDENTIFIER FROM STRINGVALUE • ';'

    ';'  shift, and go to state 148


State 123

   29 block: CONSOLELOG $@8 '(' console_outputs ')' • ';'

    ';'  shift, and go to state 149


State 124

   61 condition: TRUE $@15 •

    $default  reduce using rule 61 (condition)


State 125

   63 condition: FALSE $@16 •

    $default  reduce using rule 63 (condition)


State 126

   55 condition: condition • AND M condition
   56          | condition • OR M condition
   58          | '(' condition • ')'

    AND  shift, and go to state 127
    OR   shift, and go to state 128
    ')'  shift, and go to state 150


State 127

   55 condition: condition AND • M condition

    $default  reduce using rule 54 (M)

    M  go to state 151


State 128

   56 condition: condition OR • M condition

    $default  reduce using rule 54 (M)

    M  go to state 152


State 129

   26 block: IF $@5 '(' condition ')' • $@6 '{' body '}' $@7 else

    $default  reduce using rule 24 ($@6)

    $@6  go to state 153


State 130

   57 condition: value relop • value

    SCAN         shift, and go to state 69
    TRUE         shift, and go to state 71
    FALSE        shift, and go to state 72
    INTEGER      shift, and go to state 73
    FLOAT        shift, and go to state 74
    STRINGVALUE  shift, and go to state 75
    IDENTIFIER   shift, and go to state 76

    number  go to state 82
    value   go to state 154


State 131

   19 block: WHILE $@1 '(' condition ')' • $@2 '{' body '}'

    $default  reduce using rule 18 ($@2)

    $@2  go to state 155


State 132

   35 function: FUNCTION $@9 IDENTIFIER $@10 '(' • parameterList ')' '{' body return '}'

    IDENTIFIER  shift, and go to state 156

    $default  reduce using rule 44 (parameterList)

    parameterList  go to state 157
    parameter      go to state 158


State 133

   22 block: FOR $@3 '(' statement ';' • condition $@4 ';' statement ')' '{' body '}'

    SCAN         shift, and go to state 69
    TRUE         shift, and go to state 94
    FALSE        shift, and go to state 95
    INTEGER      shift, and go to state 73
    FLOAT        shift, and go to state 74
    STRINGVALUE  shift, and go to state 75
    IDENTIFIER   shift, and go to state 76
    '('          shift, and go to state 96

    condition  go to state 159
    number     go to state 82
    value      go to state 98


State 134

   36 procedure: IDENTIFIER '(' argumentList ')' ';' •

    $default  reduce using rule 36 (procedure)


State 135

   37 argumentList: argument ',' argumentList •

    $default  reduce using rule 37 (argumentList)


State 136

  109 value: SCAN $@21 '(' • ')'

    ')'  shift, and go to state 160


State 137

   84 factor: LOG '(' value • ',' value ')'

    ','  shift, and go to state 161


State 138

   87 base: '(' expression ')' •

    $default  reduce using rule 87 (base)


State 139

   79 expression: expression addops term •
   81 term: term • mulops factor

    MULT  shift, and go to state 114
    DIV   shift, and go to state 115

    $default  reduce using rule 79 (expression)

    mulops  go to state 116


State 140

   81 term: term mulops factor •

    $default  reduce using rule 81 (term)


State 141

   83 factor: base exponent base •

    $default  reduce using rule 83 (factor)


State 142

   48 datatype: NUMBERTYPE •

    $default  reduce using rule 48 (datatype)


State 143

   49 datatype: STRINGTYPE •

    $default  reduce using rule 49 (datatype)


State 144

   50 datatype: BOOLEANTYPE •

    $default  reduce using rule 50 (datatype)


State 145

   66 statement: declaration IDENTIFIER $@17 ':' datatype • $@18 init

    $default  reduce using rule 65 ($@18)

    $@18  go to state 162


State 146

    5 imports: IMPORT '{' moduleList '}' FROM STRINGVALUE ';' •

    $default  reduce using rule 5 (imports)


State 147

    6 imports: IMPORT '{' modules '}' AS IDENTIFIER FROM • STRINGVALUE ';'

    STRINGVALUE  shift, and go to state 163


State 148

    8 imports: IMPORT modules AS IDENTIFIER FROM STRINGVALUE ';' •

    $default  reduce using rule 8 (imports)


State 149

   29 block: CONSOLELOG $@8 '(' console_outputs ')' ';' •

    $default  reduce using rule 29 (block)


State 150

   58 condition: '(' condition ')' •

    $default  reduce using rule 58 (condition)


State 151

   55 condition: condition AND M • condition

    SCAN         shift, and go to state 69
    TRUE         shift, and go to state 94
    FALSE        shift, and go to state 95
    INTEGER      shift, and go to state 73
    FLOAT        shift, and go to state 74
    STRINGVALUE  shift, and go to state 75
    IDENTIFIER   shift, and go to state 76
    '('          shift, and go to state 96

    condition  go to state 164
    number     go to state 82
    value      go to state 98


State 152

   56 condition: condition OR M • condition

    SCAN         shift, and go to state 69
    TRUE         shift, and go to state 94
    FALSE        shift, and go to state 95
    INTEGER      shift, and go to state 73
    FLOAT        shift, and go to state 74
    STRINGVALUE  shift, and go to state 75
    IDENTIFIER   shift, and go to state 76
    '('          shift, and go to state 96

    condition  go to state 165
    number     go to state 82
    value      go to state 98


State 153

   26 block: IF $@5 '(' condition ')' $@6 • '{' body '}' $@7 else

    '{'  shift, and go to state 166


State 154

   57 condition: value relop value •

    $default  reduce using rule 57 (condition)


State 155

   19 block: WHILE $@1 '(' condition ')' $@2 • '{' body '}'

    '{'  shift, and go to state 167


State 156

   47 parameter: IDENTIFIER • $@12 ':' datatype $@13

    $default  reduce using rule 45 ($@12)

    $@12  go to state 168


State 157

   35 function: FUNCTION $@9 IDENTIFIER $@10 '(' parameterList • ')' '{' body return '}'

    ')'  shift, and go to state 169


State 158

   42 parameterList: parameter • ',' parameterList
   43              | parameter •

    ','  shift, and go to state 170

    $default  reduce using rule 43 (parameterList)


State 159

   22 block: FOR $@3 '(' statement ';' condition • $@4 ';' statement ')' '{' body '}'
   55 condition: condition • AND M condition
   56          | condition • OR M condition

    AND  shift, and go to state 127
    OR   shift, and go to state 128

    $default  reduce using rule 21 ($@4)

    $@4  go to state 171


State 160

  109 value: SCAN $@21 '(' ')' •

    $default  reduce using rule 109 (value)


State 161

   84 factor: LOG '(' value ',' • value ')'

    SCAN         shift, and go to state 69
    TRUE         shift, and go to state 71
    FALSE        shift, and go to state 72
    INTEGER      shift, and go to state 73
    FLOAT        shift, and go to state 74
    STRINGVALUE  shift, and go to state 75
    IDENTIFIER   shift, and go to state 76

    number  go to state 82
    value   go to state 172


State 162

   66 statement: declaration IDENTIFIER $@17 ':' datatype $@18 • init

    '='  shift, and go to state 173

    $default  reduce using rule 78 (init)

    init  go to state 174


State 163

    6 imports: IMPORT '{' modules '}' AS IDENTIFIER FROM STRINGVALUE • ';'

    ';'  shift, and go to state 175


State 164

   55 condition: condition • AND M condition
   55          | condition AND M condition •
   56          | condition • OR M condition

    AND  shift, and go to state 127
    OR   shift, and go to state 128

    AND       [reduce using rule 55 (condition)]
    OR        [reduce using rule 55 (condition)]
    $default  reduce using rule 55 (condition)


State 165

   55 condition: condition • AND M condition
   56          | condition • OR M condition
   56          | condition OR M condition •

    AND  shift, and go to state 127
    OR   shift, and go to state 128

    AND       [reduce using rule 56 (condition)]
    OR        [reduce using rule 56 (condition)]
    $default  reduce using rule 56 (condition)


State 166

   26 block: IF $@5 '(' condition ')' $@6 '{' • body '}' $@7 else

    CONSOLELOG  shift, and go to state 11
    IF          shift, and go to state 12
    WHILE       shift, and go to state 13
    LET         shift, and go to state 14
    VAR         shift, and go to state 15
    CONST       shift, and go to state 16
    FUNCTION    shift, and go to state 17
    INC         shift, and go to state 18
    DEC         shift, and go to state 19
    FOR         shift, and go to state 20
    IDENTIFIER  shift, and go to state 21

    $default  reduce using rule 14 (body)

    body         go to state 176
    block        go to state 23
    function     go to state 24
    procedure    go to state 25
    statement    go to state 26
    declaration  go to state 27


State 167

   19 block: WHILE $@1 '(' condition ')' $@2 '{' • body '}'

    CONSOLELOG  shift, and go to state 11
    IF          shift, and go to state 12
    WHILE       shift, and go to state 13
    LET         shift, and go to state 14
    VAR         shift, and go to state 15
    CONST       shift, and go to state 16
    FUNCTION    shift, and go to state 17
    INC         shift, and go to state 18
    DEC         shift, and go to state 19
    FOR         shift, and go to state 20
    IDENTIFIER  shift, and go to state 21

    $default  reduce using rule 14 (body)

    body         go to state 177
    block        go to state 23
    function     go to state 24
    procedure    go to state 25
    statement    go to state 26
    declaration  go to state 27


State 168

   47 parameter: IDENTIFIER $@12 • ':' datatype $@13

    ':'  shift, and go to state 178


State 169

   35 function: FUNCTION $@9 IDENTIFIER $@10 '(' parameterList ')' • '{' body return '}'

    '{'  shift, and go to state 179


State 170

   42 parameterList: parameter ',' • parameterList

    IDENTIFIER  shift, and go to state 156

    $default  reduce using rule 44 (parameterList)

    parameterList  go to state 180
    parameter      go to state 158


State 171

   22 block: FOR $@3 '(' statement ';' condition $@4 • ';' statement ')' '{' body '}'

    ';'  shift, and go to state 181


State 172

   84 factor: LOG '(' value ',' value • ')'

    ')'  shift, and go to state 182


State 173

   76 init: '=' • value
   77     | '=' • expression

    SCAN         shift, and go to state 69
    LOG          shift, and go to state 70
    TRUE         shift, and go to state 71
    FALSE        shift, and go to state 72
    INTEGER      shift, and go to state 73
    FLOAT        shift, and go to state 74
    STRINGVALUE  shift, and go to state 75
    IDENTIFIER   shift, and go to state 76
    '('          shift, and go to state 77

    expression  go to state 183
    term        go to state 79
    factor      go to state 80
    base        go to state 81
    number      go to state 82
    value       go to state 184


State 174

   66 statement: declaration IDENTIFIER $@17 ':' datatype $@18 init •

    $default  reduce using rule 66 (statement)


State 175

    6 imports: IMPORT '{' modules '}' AS IDENTIFIER FROM STRINGVALUE ';' •

    $default  reduce using rule 6 (imports)


State 176

   26 block: IF $@5 '(' condition ')' $@6 '{' body • '}' $@7 else

    '}'  shift, and go to state 185


State 177

   19 block: WHILE $@1 '(' condition ')' $@2 '{' body • '}'

    '}'  shift, and go to state 186


State 178

   47 parameter: IDENTIFIER $@12 ':' • datatype $@13

    NUMBERTYPE   shift, and go to state 142
    STRINGTYPE   shift, and go to state 143
    BOOLEANTYPE  shift, and go to state 144

    datatype  go to state 187


State 179

   35 function: FUNCTION $@9 IDENTIFIER $@10 '(' parameterList ')' '{' • body return '}'

    CONSOLELOG  shift, and go to state 11
    IF          shift, and go to state 12
    WHILE       shift, and go to state 13
    LET         shift, and go to state 14
    VAR         shift, and go to state 15
    CONST       shift, and go to state 16
    FUNCTION    shift, and go to state 17
    INC         shift, and go to state 18
    DEC         shift, and go to state 19
    FOR         shift, and go to state 20
    IDENTIFIER  shift, and go to state 21

    $default  reduce using rule 14 (body)

    body         go to state 188
    block        go to state 23
    function     go to state 24
    procedure    go to state 25
    statement    go to state 26
    declaration  go to state 27


State 180

   42 parameterList: parameter ',' parameterList •

    $default  reduce using rule 42 (parameterList)


State 181

   22 block: FOR $@3 '(' statement ';' condition $@4 ';' • statement ')' '{' body '}'

    LET         shift, and go to state 14
    VAR         shift, and go to state 15
    CONST       shift, and go to state 16
    INC         shift, and go to state 18
    DEC         shift, and go to state 19
    IDENTIFIER  shift, and go to state 101

    statement    go to state 189
    declaration  go to state 27


State 182

   84 factor: LOG '(' value ',' value ')' •

    $default  reduce using rule 84 (factor)


State 183

   77 init: '=' expression •
   79 expression: expression • addops term

    ADD  shift, and go to state 111
    SUB  shift, and go to state 112

    $default  reduce using rule 77 (init)

    addops  go to state 113


State 184

   76 init: '=' value •
   86 base: value •

    ';'       reduce using rule 76 (init)
    ';'       [reduce using rule 86 (base)]
    ')'       reduce using rule 76 (init)
    ')'       [reduce using rule 86 (base)]
    $default  reduce using rule 86 (base)


State 185

   26 block: IF $@5 '(' condition ')' $@6 '{' body '}' • $@7 else

    $default  reduce using rule 25 ($@7)

    $@7  go to state 190


State 186

   19 block: WHILE $@1 '(' condition ')' $@2 '{' body '}' •

    $default  reduce using rule 19 (block)


State 187

   47 parameter: IDENTIFIER $@12 ':' datatype • $@13

    $default  reduce using rule 46 ($@13)

    $@13  go to state 191


State 188

   35 function: FUNCTION $@9 IDENTIFIER $@10 '(' parameterList ')' '{' body • return '}'

    RETURN  shift, and go to state 192

    $default  reduce using rule 112 (return)

    return  go to state 193


State 189

   22 block: FOR $@3 '(' statement ';' condition $@4 ';' statement • ')' '{' body '}'

    ')'  shift, and go to state 194


State 190

   26 block: IF $@5 '(' condition ')' $@6 '{' body '}' $@7 • else

    ELSE  shift, and go to state 195

    $default  reduce using rule 53 (else)

    else  go to state 196


State 191

   47 parameter: IDENTIFIER $@12 ':' datatype $@13 •

    $default  reduce using rule 47 (parameter)


State 192

  111 return: RETURN • $@22 value ';'

    $default  reduce using rule 110 ($@22)

    $@22  go to state 197


State 193

   35 function: FUNCTION $@9 IDENTIFIER $@10 '(' parameterList ')' '{' body return • '}'

    '}'  shift, and go to state 198


State 194

   22 block: FOR $@3 '(' statement ';' condition $@4 ';' statement ')' • '{' body '}'

    '{'  shift, and go to state 199


State 195

   52 else: ELSE • $@14 '{' body '}'

    $default  reduce using rule 51 ($@14)

    $@14  go to state 200


State 196

   26 block: IF $@5 '(' condition ')' $@6 '{' body '}' $@7 else •

    $default  reduce using rule 26 (block)


State 197

  111 return: RETURN $@22 • value ';'

    SCAN         shift, and go to state 69
    TRUE         shift, and go to state 71
    FALSE        shift, and go to state 72
    INTEGER      shift, and go to state 73
    FLOAT        shift, and go to state 74
    STRINGVALUE  shift, and go to state 75
    IDENTIFIER   shift, and go to state 76

    number  go to state 82
    value   go to state 201


State 198

   35 function: FUNCTION $@9 IDENTIFIER $@10 '(' parameterList ')' '{' body return '}' •

    $default  reduce using rule 35 (function)


State 199

   22 block: FOR $@3 '(' statement ';' condition $@4 ';' statement ')' '{' • body '}'

    CONSOLELOG  shift, and go to state 11
    IF          shift, and go to state 12
    WHILE       shift, and go to state 13
    LET         shift, and go to state 14
    VAR         shift, and go to state 15
    CONST       shift, and go to state 16
    FUNCTION    shift, and go to state 17
    INC         shift, and go to state 18
    DEC         shift, and go to state 19
    FOR         shift, and go to state 20
    IDENTIFIER  shift, and go to state 21

    $default  reduce using rule 14 (body)

    body         go to state 202
    block        go to state 23
    function     go to state 24
    procedure    go to state 25
    statement    go to state 26
    declaration  go to state 27


State 200

   52 else: ELSE $@14 • '{' body '}'

    '{'  shift, and go to state 203


State 201

  111 return: RETURN $@22 value • ';'

    ';'  shift, and go to state 204


State 202

   22 block: FOR $@3 '(' statement ';' condition $@4 ';' statement ')' '{' body • '}'

    '}'  shift, and go to state 205


State 203

   52 else: ELSE $@14 '{' • body '}'

    CONSOLELOG  shift, and go to state 11
    IF          shift, and go to state 12
    WHILE       shift, and go to state 13
    LET         shift, and go to state 14
    VAR         shift, and go to state 15
    CONST       shift, and go to state 16
    FUNCTION    shift, and go to state 17
    INC         shift, and go to state 18
    DEC         shift, and go to state 19
    FOR         shift, and go to state 20
    IDENTIFIER  shift, and go to state 21

    $default  reduce using rule 14 (body)

    body         go to state 206
    block        go to state 23
    function     go to state 24
    procedure    go to state 25
    statement    go to state 26
    declaration  go to state 27


State 204

  111 return: RETURN $@22 value ';' •

    $default  reduce using rule 111 (return)


State 205

   22 block: FOR $@3 '(' statement ';' condition $@4 ';' statement ')' '{' body '}' •

    $default  reduce using rule 22 (block)


State 206

   52 else: ELSE $@14 '{' body • '}'

    '}'  shift, and go to state 207


State 207

   52 else: ELSE $@14 '{' body '}' •

    $default  reduce using rule 52 (else)
