Terminals unused in grammar

    ELIF


State 4 conflicts: 12 reduce/reduce
State 29 conflicts: 1 shift/reduce
State 56 conflicts: 1 shift/reduce
State 85 conflicts: 1 reduce/reduce
State 86 conflicts: 1 reduce/reduce
State 89 conflicts: 4 reduce/reduce
State 90 conflicts: 4 reduce/reduce
State 139 conflicts: 2 shift/reduce
State 168 conflicts: 2 reduce/reduce


Grammar

    0 $accept: main $end

    1 main: importList body

    2 importList: imports importList
    3           | imports
    4           | ε

    5 imports: IMPORT '{' moduleList '}' FROM STRINGVALUE ';'
    6        | IMPORT '{' modules '}' AS IDENTIFIER FROM STRINGVALUE ';'
    7        | IMPORT moduleList FROM STRINGVALUE ';'
    8        | IMPORT modules AS IDENTIFIER FROM STRINGVALUE ';'

    9 moduleList: moduleList ',' moduleList
   10           | modules

   11 modules: IDENTIFIER
   12        | MULT

   13 body: block body
   14     | ε

   15 block: function

   16 $@1: ε

   17 block: WHILE $@1 '(' condition ')' '{' body '}'

   18 $@2: ε

   19 block: FOR $@2 '(' statement ';' condition ';' statement ')' '{' body '}'

   20 $@3: ε

   21 $@4: ε

   22 $@5: ε

   23 block: IF $@3 '(' condition ')' $@4 '{' body '}' $@5 else
   24      | statement ';'

   25 $@6: ε

   26 block: CONSOLELOG $@6 '(' console_outputs ')' ';'

   27 console_outputs: STRINGVALUE
   28                | IDENTIFIER
   29                | expression

   30 $@7: ε

   31 $@8: ε

   32 function: FUNCTION $@7 IDENTIFIER $@8 '(' parameterList ')' '{' body return '}'

   33 parameterList: parameter ',' parameterList
   34              | parameter
   35              | ε

   36 $@9: ε

   37 $@10: ε

   38 parameter: IDENTIFIER $@9 ':' datatype $@10

   39 datatype: NUMBERTYPE
   40         | STRINGTYPE
   41         | BOOLEANTYPE

   42 $@11: ε

   43 else: ELSE $@11 '{' body '}'
   44     | ε

   45 condition: condition and_or condition
   46          | value relop value
   47          | value

   48 $@12: ε

   49 condition: TRUE $@12

   50 $@13: ε

   51 condition: FALSE $@13

   52 $@14: ε

   53 $@15: ε

   54 statement: declaration IDENTIFIER $@14 ':' datatype $@15 init
   55          | IDENTIFIER '=' expression
   56          | IDENTIFIER relop expression
   57          | IDENTIFIER INC
   58          | IDENTIFIER DEC
   59          | INC IDENTIFIER
   60          | DEC IDENTIFIER

   61 declaration: LET
   62            | VAR
   63            | CONST

   64 init: '=' value
   65     | '=' expression
   66     | ε

   67 expression: expression addops term
   68           | term

   69 term: term mulops factor
   70     | factor

   71 factor: base exponent base
   72       | LOG '(' value ',' value ')'
   73       | base

   74 base: value
   75     | '(' expression ')'

   76 and_or: AND
   77       | OR

   78 exponent: POW

   79 mulops: MULT
   80       | DIV

   81 addops: ADD
   82       | SUB

   83 relop: LT
   84      | GT
   85      | LE
   86      | GE
   87      | EQ
   88      | NE

   89 number: INTEGER
   90       | FLOAT

   91 value: number
   92      | IDENTIFIER
   93      | STRINGVALUE

   94 $@16: ε

   95 value: TRUE $@16

   96 $@17: ε

   97 value: FALSE $@17

   98 $@18: ε

   99 value: SCAN $@18 '(' ')'

  100 $@19: ε

  101 return: RETURN $@19 value ';'
  102       | ε


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 17 19 23 26 32 72 75 99
    ')' (41) 17 19 23 26 32 72 75 99
    ',' (44) 9 33 72
    ':' (58) 38 54
    ';' (59) 5 6 7 8 19 24 26 101
    '=' (61) 55 64 65
    '{' (123) 5 6 17 19 23 32 43
    '}' (125) 5 6 17 19 23 32 43
    error (256)
    IMPORT <treeNode> (258) 5 6 7 8
    FROM <treeNode> (259) 5 6 7 8
    AS <treeNode> (260) 6 8
    CONSOLELOG <treeNode> (261) 26
    SCAN <treeNode> (262) 99
    IF <treeNode> (263) 23
    WHILE <treeNode> (264) 17
    ELSE <treeNode> (265) 43
    RETURN <treeNode> (266) 101
    ELIF <treeNode> (267)
    LET <treeNode> (268) 61
    VAR <treeNode> (269) 62
    CONST <treeNode> (270) 63
    ADD <treeNode> (271) 81
    SUB <treeNode> (272) 82
    MULT <treeNode> (273) 12 79
    DIV <treeNode> (274) 80
    LOG <treeNode> (275) 72
    GE <treeNode> (276) 86
    LE <treeNode> (277) 85
    GT <treeNode> (278) 84
    LT <treeNode> (279) 83
    EQ <treeNode> (280) 87
    NE <treeNode> (281) 88
    TRUE <treeNode> (282) 49 95
    FALSE <treeNode> (283) 51 97
    AND <treeNode> (284) 76
    OR <treeNode> (285) 77
    NUMBERTYPE <treeNode> (286) 39
    STRINGTYPE <treeNode> (287) 40
    BOOLEANTYPE <treeNode> (288) 41
    FUNCTION <treeNode> (289) 32
    INTEGER <treeNode> (290) 89
    FLOAT <treeNode> (291) 90
    STRINGVALUE <treeNode> (292) 5 6 7 8 27 93
    INC <treeNode> (293) 57 59
    DEC <treeNode> (294) 58 60
    FOR <treeNode> (295) 19
    POW <treeNode2> (296) 78
    IDENTIFIER <treeNode2> (297) 6 8 11 28 32 38 54 55 56 57 58 59 60 92


Nonterminals, with rules where they appear

    $accept (51)
        on left: 0
    main <treeNode> (52)
        on left: 1
        on right: 0
    importList <treeNode> (53)
        on left: 2 3 4
        on right: 1 2
    imports <treeNode> (54)
        on left: 5 6 7 8
        on right: 2 3
    moduleList <treeNode> (55)
        on left: 9 10
        on right: 5 7 9
    modules <treeNode> (56)
        on left: 11 12
        on right: 6 8 10
    body <treeNode> (57)
        on left: 13 14
        on right: 1 13 17 19 23 32 43
    block <treeNode> (58)
        on left: 15 17 19 23 24 26
        on right: 13
    $@1 (59)
        on left: 16
        on right: 17
    $@2 (60)
        on left: 18
        on right: 19
    $@3 (61)
        on left: 20
        on right: 23
    $@4 (62)
        on left: 21
        on right: 23
    $@5 (63)
        on left: 22
        on right: 23
    $@6 (64)
        on left: 25
        on right: 26
    console_outputs <treeNode> (65)
        on left: 27 28 29
        on right: 26
    function <treeNode2> (66)
        on left: 32
        on right: 15
    $@7 (67)
        on left: 30
        on right: 32
    $@8 (68)
        on left: 31
        on right: 32
    parameterList <treeNode> (69)
        on left: 33 34 35
        on right: 32 33
    parameter <treeNode> (70)
        on left: 38
        on right: 33 34
    $@9 (71)
        on left: 36
        on right: 38
    $@10 (72)
        on left: 37
        on right: 38
    datatype <treeNode> (73)
        on left: 39 40 41
        on right: 38 54
    else <treeNode> (74)
        on left: 43 44
        on right: 23
    $@11 (75)
        on left: 42
        on right: 43
    condition <treeNode3> (76)
        on left: 45 46 47 49 51
        on right: 17 19 23 45
    $@12 (77)
        on left: 48
        on right: 49
    $@13 (78)
        on left: 50
        on right: 51
    statement <treeNode> (79)
        on left: 54 55 56 57 58 59 60
        on right: 19 24
    $@14 (80)
        on left: 52
        on right: 54
    $@15 (81)
        on left: 53
        on right: 54
    declaration <treeNode> (82)
        on left: 61 62 63
        on right: 54
    init <treeNode2> (83)
        on left: 64 65 66
        on right: 54
    expression <treeNode2> (84)
        on left: 67 68
        on right: 29 55 56 65 67 75
    term <treeNode2> (85)
        on left: 69 70
        on right: 67 68 69
    factor <treeNode2> (86)
        on left: 71 72 73
        on right: 69 70
    base <treeNode2> (87)
        on left: 74 75
        on right: 71 73
    and_or <treeNode> (88)
        on left: 76 77
        on right: 45
    exponent <treeNode2> (89)
        on left: 78
        on right: 71
    mulops <treeNode> (90)
        on left: 79 80
        on right: 69
    addops <treeNode> (91)
        on left: 81 82
        on right: 67
    relop <treeNode> (92)
        on left: 83 84 85 86 87 88
        on right: 46 56
    number <treeNode2> (93)
        on left: 89 90
        on right: 91
    value <treeNode2> (94)
        on left: 91 92 93 95 97 99
        on right: 46 47 64 72 74 101
    $@16 (95)
        on left: 94
        on right: 95
    $@17 (96)
        on left: 96
        on right: 97
    $@18 (97)
        on left: 98
        on right: 99
    return <treeNode> (98)
        on left: 101 102
        on right: 32
    $@19 (99)
        on left: 100
        on right: 101


State 0

    0 $accept: • main $end

    IMPORT  shift, and go to state 1

    $default  reduce using rule 4 (importList)

    main        go to state 2
    importList  go to state 3
    imports     go to state 4


State 1

    5 imports: IMPORT • '{' moduleList '}' FROM STRINGVALUE ';'
    6        | IMPORT • '{' modules '}' AS IDENTIFIER FROM STRINGVALUE ';'
    7        | IMPORT • moduleList FROM STRINGVALUE ';'
    8        | IMPORT • modules AS IDENTIFIER FROM STRINGVALUE ';'

    MULT        shift, and go to state 5
    IDENTIFIER  shift, and go to state 6
    '{'         shift, and go to state 7

    moduleList  go to state 8
    modules     go to state 9


State 2

    0 $accept: main • $end

    $end  shift, and go to state 10


State 3

    1 main: importList • body

    CONSOLELOG  shift, and go to state 11
    IF          shift, and go to state 12
    WHILE       shift, and go to state 13
    LET         shift, and go to state 14
    VAR         shift, and go to state 15
    CONST       shift, and go to state 16
    FUNCTION    shift, and go to state 17
    INC         shift, and go to state 18
    DEC         shift, and go to state 19
    FOR         shift, and go to state 20
    IDENTIFIER  shift, and go to state 21

    $default  reduce using rule 14 (body)

    body         go to state 22
    block        go to state 23
    function     go to state 24
    statement    go to state 25
    declaration  go to state 26


State 4

    2 importList: imports • importList
    3           | imports •

    IMPORT  shift, and go to state 1

    $end        reduce using rule 3 (importList)
    $end        [reduce using rule 4 (importList)]
    CONSOLELOG  reduce using rule 3 (importList)
    CONSOLELOG  [reduce using rule 4 (importList)]
    IF          reduce using rule 3 (importList)
    IF          [reduce using rule 4 (importList)]
    WHILE       reduce using rule 3 (importList)
    WHILE       [reduce using rule 4 (importList)]
    LET         reduce using rule 3 (importList)
    LET         [reduce using rule 4 (importList)]
    VAR         reduce using rule 3 (importList)
    VAR         [reduce using rule 4 (importList)]
    CONST       reduce using rule 3 (importList)
    CONST       [reduce using rule 4 (importList)]
    FUNCTION    reduce using rule 3 (importList)
    FUNCTION    [reduce using rule 4 (importList)]
    INC         reduce using rule 3 (importList)
    INC         [reduce using rule 4 (importList)]
    DEC         reduce using rule 3 (importList)
    DEC         [reduce using rule 4 (importList)]
    FOR         reduce using rule 3 (importList)
    FOR         [reduce using rule 4 (importList)]
    IDENTIFIER  reduce using rule 3 (importList)
    IDENTIFIER  [reduce using rule 4 (importList)]
    $default    reduce using rule 3 (importList)

    importList  go to state 27
    imports     go to state 4


State 5

   12 modules: MULT •

    $default  reduce using rule 12 (modules)


State 6

   11 modules: IDENTIFIER •

    $default  reduce using rule 11 (modules)


State 7

    5 imports: IMPORT '{' • moduleList '}' FROM STRINGVALUE ';'
    6        | IMPORT '{' • modules '}' AS IDENTIFIER FROM STRINGVALUE ';'

    MULT        shift, and go to state 5
    IDENTIFIER  shift, and go to state 6

    moduleList  go to state 28
    modules     go to state 29


State 8

    7 imports: IMPORT moduleList • FROM STRINGVALUE ';'
    9 moduleList: moduleList • ',' moduleList

    FROM  shift, and go to state 30
    ','   shift, and go to state 31


State 9

    8 imports: IMPORT modules • AS IDENTIFIER FROM STRINGVALUE ';'
   10 moduleList: modules •

    AS  shift, and go to state 32

    $default  reduce using rule 10 (moduleList)


State 10

    0 $accept: main $end •

    $default  accept


State 11

   26 block: CONSOLELOG • $@6 '(' console_outputs ')' ';'

    $default  reduce using rule 25 ($@6)

    $@6  go to state 33


State 12

   23 block: IF • $@3 '(' condition ')' $@4 '{' body '}' $@5 else

    $default  reduce using rule 20 ($@3)

    $@3  go to state 34


State 13

   17 block: WHILE • $@1 '(' condition ')' '{' body '}'

    $default  reduce using rule 16 ($@1)

    $@1  go to state 35


State 14

   61 declaration: LET •

    $default  reduce using rule 61 (declaration)


State 15

   62 declaration: VAR •

    $default  reduce using rule 62 (declaration)


State 16

   63 declaration: CONST •

    $default  reduce using rule 63 (declaration)


State 17

   32 function: FUNCTION • $@7 IDENTIFIER $@8 '(' parameterList ')' '{' body return '}'

    $default  reduce using rule 30 ($@7)

    $@7  go to state 36


State 18

   59 statement: INC • IDENTIFIER

    IDENTIFIER  shift, and go to state 37


State 19

   60 statement: DEC • IDENTIFIER

    IDENTIFIER  shift, and go to state 38


State 20

   19 block: FOR • $@2 '(' statement ';' condition ';' statement ')' '{' body '}'

    $default  reduce using rule 18 ($@2)

    $@2  go to state 39


State 21

   55 statement: IDENTIFIER • '=' expression
   56          | IDENTIFIER • relop expression
   57          | IDENTIFIER • INC
   58          | IDENTIFIER • DEC

    GE   shift, and go to state 40
    LE   shift, and go to state 41
    GT   shift, and go to state 42
    LT   shift, and go to state 43
    EQ   shift, and go to state 44
    NE   shift, and go to state 45
    INC  shift, and go to state 46
    DEC  shift, and go to state 47
    '='  shift, and go to state 48

    relop  go to state 49


State 22

    1 main: importList body •

    $default  reduce using rule 1 (main)


State 23

   13 body: block • body

    CONSOLELOG  shift, and go to state 11
    IF          shift, and go to state 12
    WHILE       shift, and go to state 13
    LET         shift, and go to state 14
    VAR         shift, and go to state 15
    CONST       shift, and go to state 16
    FUNCTION    shift, and go to state 17
    INC         shift, and go to state 18
    DEC         shift, and go to state 19
    FOR         shift, and go to state 20
    IDENTIFIER  shift, and go to state 21

    $default  reduce using rule 14 (body)

    body         go to state 50
    block        go to state 23
    function     go to state 24
    statement    go to state 25
    declaration  go to state 26


State 24

   15 block: function •

    $default  reduce using rule 15 (block)


State 25

   24 block: statement • ';'

    ';'  shift, and go to state 51


State 26

   54 statement: declaration • IDENTIFIER $@14 ':' datatype $@15 init

    IDENTIFIER  shift, and go to state 52


State 27

    2 importList: imports importList •

    $default  reduce using rule 2 (importList)


State 28

    5 imports: IMPORT '{' moduleList • '}' FROM STRINGVALUE ';'
    9 moduleList: moduleList • ',' moduleList

    '}'  shift, and go to state 53
    ','  shift, and go to state 31


State 29

    6 imports: IMPORT '{' modules • '}' AS IDENTIFIER FROM STRINGVALUE ';'
   10 moduleList: modules •

    '}'  shift, and go to state 54

    '}'       [reduce using rule 10 (moduleList)]
    $default  reduce using rule 10 (moduleList)


State 30

    7 imports: IMPORT moduleList FROM • STRINGVALUE ';'

    STRINGVALUE  shift, and go to state 55


State 31

    9 moduleList: moduleList ',' • moduleList

    MULT        shift, and go to state 5
    IDENTIFIER  shift, and go to state 6

    moduleList  go to state 56
    modules     go to state 57


State 32

    8 imports: IMPORT modules AS • IDENTIFIER FROM STRINGVALUE ';'

    IDENTIFIER  shift, and go to state 58


State 33

   26 block: CONSOLELOG $@6 • '(' console_outputs ')' ';'

    '('  shift, and go to state 59


State 34

   23 block: IF $@3 • '(' condition ')' $@4 '{' body '}' $@5 else

    '('  shift, and go to state 60


State 35

   17 block: WHILE $@1 • '(' condition ')' '{' body '}'

    '('  shift, and go to state 61


State 36

   32 function: FUNCTION $@7 • IDENTIFIER $@8 '(' parameterList ')' '{' body return '}'

    IDENTIFIER  shift, and go to state 62


State 37

   59 statement: INC IDENTIFIER •

    $default  reduce using rule 59 (statement)


State 38

   60 statement: DEC IDENTIFIER •

    $default  reduce using rule 60 (statement)


State 39

   19 block: FOR $@2 • '(' statement ';' condition ';' statement ')' '{' body '}'

    '('  shift, and go to state 63


State 40

   86 relop: GE •

    $default  reduce using rule 86 (relop)


State 41

   85 relop: LE •

    $default  reduce using rule 85 (relop)


State 42

   84 relop: GT •

    $default  reduce using rule 84 (relop)


State 43

   83 relop: LT •

    $default  reduce using rule 83 (relop)


State 44

   87 relop: EQ •

    $default  reduce using rule 87 (relop)


State 45

   88 relop: NE •

    $default  reduce using rule 88 (relop)


State 46

   57 statement: IDENTIFIER INC •

    $default  reduce using rule 57 (statement)


State 47

   58 statement: IDENTIFIER DEC •

    $default  reduce using rule 58 (statement)


State 48

   55 statement: IDENTIFIER '=' • expression

    SCAN         shift, and go to state 64
    LOG          shift, and go to state 65
    TRUE         shift, and go to state 66
    FALSE        shift, and go to state 67
    INTEGER      shift, and go to state 68
    FLOAT        shift, and go to state 69
    STRINGVALUE  shift, and go to state 70
    IDENTIFIER   shift, and go to state 71
    '('          shift, and go to state 72

    expression  go to state 73
    term        go to state 74
    factor      go to state 75
    base        go to state 76
    number      go to state 77
    value       go to state 78


State 49

   56 statement: IDENTIFIER relop • expression

    SCAN         shift, and go to state 64
    LOG          shift, and go to state 65
    TRUE         shift, and go to state 66
    FALSE        shift, and go to state 67
    INTEGER      shift, and go to state 68
    FLOAT        shift, and go to state 69
    STRINGVALUE  shift, and go to state 70
    IDENTIFIER   shift, and go to state 71
    '('          shift, and go to state 72

    expression  go to state 79
    term        go to state 74
    factor      go to state 75
    base        go to state 76
    number      go to state 77
    value       go to state 78


State 50

   13 body: block body •

    $default  reduce using rule 13 (body)


State 51

   24 block: statement ';' •

    $default  reduce using rule 24 (block)


State 52

   54 statement: declaration IDENTIFIER • $@14 ':' datatype $@15 init

    $default  reduce using rule 52 ($@14)

    $@14  go to state 80


State 53

    5 imports: IMPORT '{' moduleList '}' • FROM STRINGVALUE ';'

    FROM  shift, and go to state 81


State 54

    6 imports: IMPORT '{' modules '}' • AS IDENTIFIER FROM STRINGVALUE ';'

    AS  shift, and go to state 82


State 55

    7 imports: IMPORT moduleList FROM STRINGVALUE • ';'

    ';'  shift, and go to state 83


State 56

    9 moduleList: moduleList • ',' moduleList
    9           | moduleList ',' moduleList •

    ','  shift, and go to state 31

    ','       [reduce using rule 9 (moduleList)]
    $default  reduce using rule 9 (moduleList)


State 57

   10 moduleList: modules •

    $default  reduce using rule 10 (moduleList)


State 58

    8 imports: IMPORT modules AS IDENTIFIER • FROM STRINGVALUE ';'

    FROM  shift, and go to state 84


State 59

   26 block: CONSOLELOG $@6 '(' • console_outputs ')' ';'

    SCAN         shift, and go to state 64
    LOG          shift, and go to state 65
    TRUE         shift, and go to state 66
    FALSE        shift, and go to state 67
    INTEGER      shift, and go to state 68
    FLOAT        shift, and go to state 69
    STRINGVALUE  shift, and go to state 85
    IDENTIFIER   shift, and go to state 86
    '('          shift, and go to state 72

    console_outputs  go to state 87
    expression       go to state 88
    term             go to state 74
    factor           go to state 75
    base             go to state 76
    number           go to state 77
    value            go to state 78


State 60

   23 block: IF $@3 '(' • condition ')' $@4 '{' body '}' $@5 else

    SCAN         shift, and go to state 64
    TRUE         shift, and go to state 89
    FALSE        shift, and go to state 90
    INTEGER      shift, and go to state 68
    FLOAT        shift, and go to state 69
    STRINGVALUE  shift, and go to state 70
    IDENTIFIER   shift, and go to state 71

    condition  go to state 91
    number     go to state 77
    value      go to state 92


State 61

   17 block: WHILE $@1 '(' • condition ')' '{' body '}'

    SCAN         shift, and go to state 64
    TRUE         shift, and go to state 89
    FALSE        shift, and go to state 90
    INTEGER      shift, and go to state 68
    FLOAT        shift, and go to state 69
    STRINGVALUE  shift, and go to state 70
    IDENTIFIER   shift, and go to state 71

    condition  go to state 93
    number     go to state 77
    value      go to state 92


State 62

   32 function: FUNCTION $@7 IDENTIFIER • $@8 '(' parameterList ')' '{' body return '}'

    $default  reduce using rule 31 ($@8)

    $@8  go to state 94


State 63

   19 block: FOR $@2 '(' • statement ';' condition ';' statement ')' '{' body '}'

    LET         shift, and go to state 14
    VAR         shift, and go to state 15
    CONST       shift, and go to state 16
    INC         shift, and go to state 18
    DEC         shift, and go to state 19
    IDENTIFIER  shift, and go to state 21

    statement    go to state 95
    declaration  go to state 26


State 64

   99 value: SCAN • $@18 '(' ')'

    $default  reduce using rule 98 ($@18)

    $@18  go to state 96


State 65

   72 factor: LOG • '(' value ',' value ')'

    '('  shift, and go to state 97


State 66

   95 value: TRUE • $@16

    $default  reduce using rule 94 ($@16)

    $@16  go to state 98


State 67

   97 value: FALSE • $@17

    $default  reduce using rule 96 ($@17)

    $@17  go to state 99


State 68

   89 number: INTEGER •

    $default  reduce using rule 89 (number)


State 69

   90 number: FLOAT •

    $default  reduce using rule 90 (number)


State 70

   93 value: STRINGVALUE •

    $default  reduce using rule 93 (value)


State 71

   92 value: IDENTIFIER •

    $default  reduce using rule 92 (value)


State 72

   75 base: '(' • expression ')'

    SCAN         shift, and go to state 64
    LOG          shift, and go to state 65
    TRUE         shift, and go to state 66
    FALSE        shift, and go to state 67
    INTEGER      shift, and go to state 68
    FLOAT        shift, and go to state 69
    STRINGVALUE  shift, and go to state 70
    IDENTIFIER   shift, and go to state 71
    '('          shift, and go to state 72

    expression  go to state 100
    term        go to state 74
    factor      go to state 75
    base        go to state 76
    number      go to state 77
    value       go to state 78


State 73

   55 statement: IDENTIFIER '=' expression •
   67 expression: expression • addops term

    ADD  shift, and go to state 101
    SUB  shift, and go to state 102

    $default  reduce using rule 55 (statement)

    addops  go to state 103


State 74

   68 expression: term •
   69 term: term • mulops factor

    MULT  shift, and go to state 104
    DIV   shift, and go to state 105

    $default  reduce using rule 68 (expression)

    mulops  go to state 106


State 75

   70 term: factor •

    $default  reduce using rule 70 (term)


State 76

   71 factor: base • exponent base
   73       | base •

    POW  shift, and go to state 107

    $default  reduce using rule 73 (factor)

    exponent  go to state 108


State 77

   91 value: number •

    $default  reduce using rule 91 (value)


State 78

   74 base: value •

    $default  reduce using rule 74 (base)


State 79

   56 statement: IDENTIFIER relop expression •
   67 expression: expression • addops term

    ADD  shift, and go to state 101
    SUB  shift, and go to state 102

    $default  reduce using rule 56 (statement)

    addops  go to state 103


State 80

   54 statement: declaration IDENTIFIER $@14 • ':' datatype $@15 init

    ':'  shift, and go to state 109


State 81

    5 imports: IMPORT '{' moduleList '}' FROM • STRINGVALUE ';'

    STRINGVALUE  shift, and go to state 110


State 82

    6 imports: IMPORT '{' modules '}' AS • IDENTIFIER FROM STRINGVALUE ';'

    IDENTIFIER  shift, and go to state 111


State 83

    7 imports: IMPORT moduleList FROM STRINGVALUE ';' •

    $default  reduce using rule 7 (imports)


State 84

    8 imports: IMPORT modules AS IDENTIFIER FROM • STRINGVALUE ';'

    STRINGVALUE  shift, and go to state 112


State 85

   27 console_outputs: STRINGVALUE •
   93 value: STRINGVALUE •

    ')'       reduce using rule 27 (console_outputs)
    ')'       [reduce using rule 93 (value)]
    $default  reduce using rule 93 (value)


State 86

   28 console_outputs: IDENTIFIER •
   92 value: IDENTIFIER •

    ')'       reduce using rule 28 (console_outputs)
    ')'       [reduce using rule 92 (value)]
    $default  reduce using rule 92 (value)


State 87

   26 block: CONSOLELOG $@6 '(' console_outputs • ')' ';'

    ')'  shift, and go to state 113


State 88

   29 console_outputs: expression •
   67 expression: expression • addops term

    ADD  shift, and go to state 101
    SUB  shift, and go to state 102

    $default  reduce using rule 29 (console_outputs)

    addops  go to state 103


State 89

   49 condition: TRUE • $@12
   95 value: TRUE • $@16

    AND       reduce using rule 48 ($@12)
    AND       [reduce using rule 94 ($@16)]
    OR        reduce using rule 48 ($@12)
    OR        [reduce using rule 94 ($@16)]
    ';'       reduce using rule 48 ($@12)
    ';'       [reduce using rule 94 ($@16)]
    ')'       reduce using rule 48 ($@12)
    ')'       [reduce using rule 94 ($@16)]
    $default  reduce using rule 94 ($@16)

    $@12  go to state 114
    $@16  go to state 98


State 90

   51 condition: FALSE • $@13
   97 value: FALSE • $@17

    AND       reduce using rule 50 ($@13)
    AND       [reduce using rule 96 ($@17)]
    OR        reduce using rule 50 ($@13)
    OR        [reduce using rule 96 ($@17)]
    ';'       reduce using rule 50 ($@13)
    ';'       [reduce using rule 96 ($@17)]
    ')'       reduce using rule 50 ($@13)
    ')'       [reduce using rule 96 ($@17)]
    $default  reduce using rule 96 ($@17)

    $@13  go to state 115
    $@17  go to state 99


State 91

   23 block: IF $@3 '(' condition • ')' $@4 '{' body '}' $@5 else
   45 condition: condition • and_or condition

    AND  shift, and go to state 116
    OR   shift, and go to state 117
    ')'  shift, and go to state 118

    and_or  go to state 119


State 92

   46 condition: value • relop value
   47          | value •

    GE  shift, and go to state 40
    LE  shift, and go to state 41
    GT  shift, and go to state 42
    LT  shift, and go to state 43
    EQ  shift, and go to state 44
    NE  shift, and go to state 45

    $default  reduce using rule 47 (condition)

    relop  go to state 120


State 93

   17 block: WHILE $@1 '(' condition • ')' '{' body '}'
   45 condition: condition • and_or condition

    AND  shift, and go to state 116
    OR   shift, and go to state 117
    ')'  shift, and go to state 121

    and_or  go to state 119


State 94

   32 function: FUNCTION $@7 IDENTIFIER $@8 • '(' parameterList ')' '{' body return '}'

    '('  shift, and go to state 122


State 95

   19 block: FOR $@2 '(' statement • ';' condition ';' statement ')' '{' body '}'

    ';'  shift, and go to state 123


State 96

   99 value: SCAN $@18 • '(' ')'

    '('  shift, and go to state 124


State 97

   72 factor: LOG '(' • value ',' value ')'

    SCAN         shift, and go to state 64
    TRUE         shift, and go to state 66
    FALSE        shift, and go to state 67
    INTEGER      shift, and go to state 68
    FLOAT        shift, and go to state 69
    STRINGVALUE  shift, and go to state 70
    IDENTIFIER   shift, and go to state 71

    number  go to state 77
    value   go to state 125


State 98

   95 value: TRUE $@16 •

    $default  reduce using rule 95 (value)


State 99

   97 value: FALSE $@17 •

    $default  reduce using rule 97 (value)


State 100

   67 expression: expression • addops term
   75 base: '(' expression • ')'

    ADD  shift, and go to state 101
    SUB  shift, and go to state 102
    ')'  shift, and go to state 126

    addops  go to state 103


State 101

   81 addops: ADD •

    $default  reduce using rule 81 (addops)


State 102

   82 addops: SUB •

    $default  reduce using rule 82 (addops)


State 103

   67 expression: expression addops • term

    SCAN         shift, and go to state 64
    LOG          shift, and go to state 65
    TRUE         shift, and go to state 66
    FALSE        shift, and go to state 67
    INTEGER      shift, and go to state 68
    FLOAT        shift, and go to state 69
    STRINGVALUE  shift, and go to state 70
    IDENTIFIER   shift, and go to state 71
    '('          shift, and go to state 72

    term    go to state 127
    factor  go to state 75
    base    go to state 76
    number  go to state 77
    value   go to state 78


State 104

   79 mulops: MULT •

    $default  reduce using rule 79 (mulops)


State 105

   80 mulops: DIV •

    $default  reduce using rule 80 (mulops)


State 106

   69 term: term mulops • factor

    SCAN         shift, and go to state 64
    LOG          shift, and go to state 65
    TRUE         shift, and go to state 66
    FALSE        shift, and go to state 67
    INTEGER      shift, and go to state 68
    FLOAT        shift, and go to state 69
    STRINGVALUE  shift, and go to state 70
    IDENTIFIER   shift, and go to state 71
    '('          shift, and go to state 72

    factor  go to state 128
    base    go to state 76
    number  go to state 77
    value   go to state 78


State 107

   78 exponent: POW •

    $default  reduce using rule 78 (exponent)


State 108

   71 factor: base exponent • base

    SCAN         shift, and go to state 64
    TRUE         shift, and go to state 66
    FALSE        shift, and go to state 67
    INTEGER      shift, and go to state 68
    FLOAT        shift, and go to state 69
    STRINGVALUE  shift, and go to state 70
    IDENTIFIER   shift, and go to state 71
    '('          shift, and go to state 72

    base    go to state 129
    number  go to state 77
    value   go to state 78


State 109

   54 statement: declaration IDENTIFIER $@14 ':' • datatype $@15 init

    NUMBERTYPE   shift, and go to state 130
    STRINGTYPE   shift, and go to state 131
    BOOLEANTYPE  shift, and go to state 132

    datatype  go to state 133


State 110

    5 imports: IMPORT '{' moduleList '}' FROM STRINGVALUE • ';'

    ';'  shift, and go to state 134


State 111

    6 imports: IMPORT '{' modules '}' AS IDENTIFIER • FROM STRINGVALUE ';'

    FROM  shift, and go to state 135


State 112

    8 imports: IMPORT modules AS IDENTIFIER FROM STRINGVALUE • ';'

    ';'  shift, and go to state 136


State 113

   26 block: CONSOLELOG $@6 '(' console_outputs ')' • ';'

    ';'  shift, and go to state 137


State 114

   49 condition: TRUE $@12 •

    $default  reduce using rule 49 (condition)


State 115

   51 condition: FALSE $@13 •

    $default  reduce using rule 51 (condition)


State 116

   76 and_or: AND •

    $default  reduce using rule 76 (and_or)


State 117

   77 and_or: OR •

    $default  reduce using rule 77 (and_or)


State 118

   23 block: IF $@3 '(' condition ')' • $@4 '{' body '}' $@5 else

    $default  reduce using rule 21 ($@4)

    $@4  go to state 138


State 119

   45 condition: condition and_or • condition

    SCAN         shift, and go to state 64
    TRUE         shift, and go to state 89
    FALSE        shift, and go to state 90
    INTEGER      shift, and go to state 68
    FLOAT        shift, and go to state 69
    STRINGVALUE  shift, and go to state 70
    IDENTIFIER   shift, and go to state 71

    condition  go to state 139
    number     go to state 77
    value      go to state 92


State 120

   46 condition: value relop • value

    SCAN         shift, and go to state 64
    TRUE         shift, and go to state 66
    FALSE        shift, and go to state 67
    INTEGER      shift, and go to state 68
    FLOAT        shift, and go to state 69
    STRINGVALUE  shift, and go to state 70
    IDENTIFIER   shift, and go to state 71

    number  go to state 77
    value   go to state 140


State 121

   17 block: WHILE $@1 '(' condition ')' • '{' body '}'

    '{'  shift, and go to state 141


State 122

   32 function: FUNCTION $@7 IDENTIFIER $@8 '(' • parameterList ')' '{' body return '}'

    IDENTIFIER  shift, and go to state 142

    $default  reduce using rule 35 (parameterList)

    parameterList  go to state 143
    parameter      go to state 144


State 123

   19 block: FOR $@2 '(' statement ';' • condition ';' statement ')' '{' body '}'

    SCAN         shift, and go to state 64
    TRUE         shift, and go to state 89
    FALSE        shift, and go to state 90
    INTEGER      shift, and go to state 68
    FLOAT        shift, and go to state 69
    STRINGVALUE  shift, and go to state 70
    IDENTIFIER   shift, and go to state 71

    condition  go to state 145
    number     go to state 77
    value      go to state 92


State 124

   99 value: SCAN $@18 '(' • ')'

    ')'  shift, and go to state 146


State 125

   72 factor: LOG '(' value • ',' value ')'

    ','  shift, and go to state 147


State 126

   75 base: '(' expression ')' •

    $default  reduce using rule 75 (base)


State 127

   67 expression: expression addops term •
   69 term: term • mulops factor

    MULT  shift, and go to state 104
    DIV   shift, and go to state 105

    $default  reduce using rule 67 (expression)

    mulops  go to state 106


State 128

   69 term: term mulops factor •

    $default  reduce using rule 69 (term)


State 129

   71 factor: base exponent base •

    $default  reduce using rule 71 (factor)


State 130

   39 datatype: NUMBERTYPE •

    $default  reduce using rule 39 (datatype)


State 131

   40 datatype: STRINGTYPE •

    $default  reduce using rule 40 (datatype)


State 132

   41 datatype: BOOLEANTYPE •

    $default  reduce using rule 41 (datatype)


State 133

   54 statement: declaration IDENTIFIER $@14 ':' datatype • $@15 init

    $default  reduce using rule 53 ($@15)

    $@15  go to state 148


State 134

    5 imports: IMPORT '{' moduleList '}' FROM STRINGVALUE ';' •

    $default  reduce using rule 5 (imports)


State 135

    6 imports: IMPORT '{' modules '}' AS IDENTIFIER FROM • STRINGVALUE ';'

    STRINGVALUE  shift, and go to state 149


State 136

    8 imports: IMPORT modules AS IDENTIFIER FROM STRINGVALUE ';' •

    $default  reduce using rule 8 (imports)


State 137

   26 block: CONSOLELOG $@6 '(' console_outputs ')' ';' •

    $default  reduce using rule 26 (block)


State 138

   23 block: IF $@3 '(' condition ')' $@4 • '{' body '}' $@5 else

    '{'  shift, and go to state 150


State 139

   45 condition: condition • and_or condition
   45          | condition and_or condition •

    AND  shift, and go to state 116
    OR   shift, and go to state 117

    AND       [reduce using rule 45 (condition)]
    OR        [reduce using rule 45 (condition)]
    $default  reduce using rule 45 (condition)

    and_or  go to state 119


State 140

   46 condition: value relop value •

    $default  reduce using rule 46 (condition)


State 141

   17 block: WHILE $@1 '(' condition ')' '{' • body '}'

    CONSOLELOG  shift, and go to state 11
    IF          shift, and go to state 12
    WHILE       shift, and go to state 13
    LET         shift, and go to state 14
    VAR         shift, and go to state 15
    CONST       shift, and go to state 16
    FUNCTION    shift, and go to state 17
    INC         shift, and go to state 18
    DEC         shift, and go to state 19
    FOR         shift, and go to state 20
    IDENTIFIER  shift, and go to state 21

    $default  reduce using rule 14 (body)

    body         go to state 151
    block        go to state 23
    function     go to state 24
    statement    go to state 25
    declaration  go to state 26


State 142

   38 parameter: IDENTIFIER • $@9 ':' datatype $@10

    $default  reduce using rule 36 ($@9)

    $@9  go to state 152


State 143

   32 function: FUNCTION $@7 IDENTIFIER $@8 '(' parameterList • ')' '{' body return '}'

    ')'  shift, and go to state 153


State 144

   33 parameterList: parameter • ',' parameterList
   34              | parameter •

    ','  shift, and go to state 154

    $default  reduce using rule 34 (parameterList)


State 145

   19 block: FOR $@2 '(' statement ';' condition • ';' statement ')' '{' body '}'
   45 condition: condition • and_or condition

    AND  shift, and go to state 116
    OR   shift, and go to state 117
    ';'  shift, and go to state 155

    and_or  go to state 119


State 146

   99 value: SCAN $@18 '(' ')' •

    $default  reduce using rule 99 (value)


State 147

   72 factor: LOG '(' value ',' • value ')'

    SCAN         shift, and go to state 64
    TRUE         shift, and go to state 66
    FALSE        shift, and go to state 67
    INTEGER      shift, and go to state 68
    FLOAT        shift, and go to state 69
    STRINGVALUE  shift, and go to state 70
    IDENTIFIER   shift, and go to state 71

    number  go to state 77
    value   go to state 156


State 148

   54 statement: declaration IDENTIFIER $@14 ':' datatype $@15 • init

    '='  shift, and go to state 157

    $default  reduce using rule 66 (init)

    init  go to state 158


State 149

    6 imports: IMPORT '{' modules '}' AS IDENTIFIER FROM STRINGVALUE • ';'

    ';'  shift, and go to state 159


State 150

   23 block: IF $@3 '(' condition ')' $@4 '{' • body '}' $@5 else

    CONSOLELOG  shift, and go to state 11
    IF          shift, and go to state 12
    WHILE       shift, and go to state 13
    LET         shift, and go to state 14
    VAR         shift, and go to state 15
    CONST       shift, and go to state 16
    FUNCTION    shift, and go to state 17
    INC         shift, and go to state 18
    DEC         shift, and go to state 19
    FOR         shift, and go to state 20
    IDENTIFIER  shift, and go to state 21

    $default  reduce using rule 14 (body)

    body         go to state 160
    block        go to state 23
    function     go to state 24
    statement    go to state 25
    declaration  go to state 26


State 151

   17 block: WHILE $@1 '(' condition ')' '{' body • '}'

    '}'  shift, and go to state 161


State 152

   38 parameter: IDENTIFIER $@9 • ':' datatype $@10

    ':'  shift, and go to state 162


State 153

   32 function: FUNCTION $@7 IDENTIFIER $@8 '(' parameterList ')' • '{' body return '}'

    '{'  shift, and go to state 163


State 154

   33 parameterList: parameter ',' • parameterList

    IDENTIFIER  shift, and go to state 142

    $default  reduce using rule 35 (parameterList)

    parameterList  go to state 164
    parameter      go to state 144


State 155

   19 block: FOR $@2 '(' statement ';' condition ';' • statement ')' '{' body '}'

    LET         shift, and go to state 14
    VAR         shift, and go to state 15
    CONST       shift, and go to state 16
    INC         shift, and go to state 18
    DEC         shift, and go to state 19
    IDENTIFIER  shift, and go to state 21

    statement    go to state 165
    declaration  go to state 26


State 156

   72 factor: LOG '(' value ',' value • ')'

    ')'  shift, and go to state 166


State 157

   64 init: '=' • value
   65     | '=' • expression

    SCAN         shift, and go to state 64
    LOG          shift, and go to state 65
    TRUE         shift, and go to state 66
    FALSE        shift, and go to state 67
    INTEGER      shift, and go to state 68
    FLOAT        shift, and go to state 69
    STRINGVALUE  shift, and go to state 70
    IDENTIFIER   shift, and go to state 71
    '('          shift, and go to state 72

    expression  go to state 167
    term        go to state 74
    factor      go to state 75
    base        go to state 76
    number      go to state 77
    value       go to state 168


State 158

   54 statement: declaration IDENTIFIER $@14 ':' datatype $@15 init •

    $default  reduce using rule 54 (statement)


State 159

    6 imports: IMPORT '{' modules '}' AS IDENTIFIER FROM STRINGVALUE ';' •

    $default  reduce using rule 6 (imports)


State 160

   23 block: IF $@3 '(' condition ')' $@4 '{' body • '}' $@5 else

    '}'  shift, and go to state 169


State 161

   17 block: WHILE $@1 '(' condition ')' '{' body '}' •

    $default  reduce using rule 17 (block)


State 162

   38 parameter: IDENTIFIER $@9 ':' • datatype $@10

    NUMBERTYPE   shift, and go to state 130
    STRINGTYPE   shift, and go to state 131
    BOOLEANTYPE  shift, and go to state 132

    datatype  go to state 170


State 163

   32 function: FUNCTION $@7 IDENTIFIER $@8 '(' parameterList ')' '{' • body return '}'

    CONSOLELOG  shift, and go to state 11
    IF          shift, and go to state 12
    WHILE       shift, and go to state 13
    LET         shift, and go to state 14
    VAR         shift, and go to state 15
    CONST       shift, and go to state 16
    FUNCTION    shift, and go to state 17
    INC         shift, and go to state 18
    DEC         shift, and go to state 19
    FOR         shift, and go to state 20
    IDENTIFIER  shift, and go to state 21

    $default  reduce using rule 14 (body)

    body         go to state 171
    block        go to state 23
    function     go to state 24
    statement    go to state 25
    declaration  go to state 26


State 164

   33 parameterList: parameter ',' parameterList •

    $default  reduce using rule 33 (parameterList)


State 165

   19 block: FOR $@2 '(' statement ';' condition ';' statement • ')' '{' body '}'

    ')'  shift, and go to state 172


State 166

   72 factor: LOG '(' value ',' value ')' •

    $default  reduce using rule 72 (factor)


State 167

   65 init: '=' expression •
   67 expression: expression • addops term

    ADD  shift, and go to state 101
    SUB  shift, and go to state 102

    $default  reduce using rule 65 (init)

    addops  go to state 103


State 168

   64 init: '=' value •
   74 base: value •

    ';'       reduce using rule 64 (init)
    ';'       [reduce using rule 74 (base)]
    ')'       reduce using rule 64 (init)
    ')'       [reduce using rule 74 (base)]
    $default  reduce using rule 74 (base)


State 169

   23 block: IF $@3 '(' condition ')' $@4 '{' body '}' • $@5 else

    $default  reduce using rule 22 ($@5)

    $@5  go to state 173


State 170

   38 parameter: IDENTIFIER $@9 ':' datatype • $@10

    $default  reduce using rule 37 ($@10)

    $@10  go to state 174


State 171

   32 function: FUNCTION $@7 IDENTIFIER $@8 '(' parameterList ')' '{' body • return '}'

    RETURN  shift, and go to state 175

    $default  reduce using rule 102 (return)

    return  go to state 176


State 172

   19 block: FOR $@2 '(' statement ';' condition ';' statement ')' • '{' body '}'

    '{'  shift, and go to state 177


State 173

   23 block: IF $@3 '(' condition ')' $@4 '{' body '}' $@5 • else

    ELSE  shift, and go to state 178

    $default  reduce using rule 44 (else)

    else  go to state 179


State 174

   38 parameter: IDENTIFIER $@9 ':' datatype $@10 •

    $default  reduce using rule 38 (parameter)


State 175

  101 return: RETURN • $@19 value ';'

    $default  reduce using rule 100 ($@19)

    $@19  go to state 180


State 176

   32 function: FUNCTION $@7 IDENTIFIER $@8 '(' parameterList ')' '{' body return • '}'

    '}'  shift, and go to state 181


State 177

   19 block: FOR $@2 '(' statement ';' condition ';' statement ')' '{' • body '}'

    CONSOLELOG  shift, and go to state 11
    IF          shift, and go to state 12
    WHILE       shift, and go to state 13
    LET         shift, and go to state 14
    VAR         shift, and go to state 15
    CONST       shift, and go to state 16
    FUNCTION    shift, and go to state 17
    INC         shift, and go to state 18
    DEC         shift, and go to state 19
    FOR         shift, and go to state 20
    IDENTIFIER  shift, and go to state 21

    $default  reduce using rule 14 (body)

    body         go to state 182
    block        go to state 23
    function     go to state 24
    statement    go to state 25
    declaration  go to state 26


State 178

   43 else: ELSE • $@11 '{' body '}'

    $default  reduce using rule 42 ($@11)

    $@11  go to state 183


State 179

   23 block: IF $@3 '(' condition ')' $@4 '{' body '}' $@5 else •

    $default  reduce using rule 23 (block)


State 180

  101 return: RETURN $@19 • value ';'

    SCAN         shift, and go to state 64
    TRUE         shift, and go to state 66
    FALSE        shift, and go to state 67
    INTEGER      shift, and go to state 68
    FLOAT        shift, and go to state 69
    STRINGVALUE  shift, and go to state 70
    IDENTIFIER   shift, and go to state 71

    number  go to state 77
    value   go to state 184


State 181

   32 function: FUNCTION $@7 IDENTIFIER $@8 '(' parameterList ')' '{' body return '}' •

    $default  reduce using rule 32 (function)


State 182

   19 block: FOR $@2 '(' statement ';' condition ';' statement ')' '{' body • '}'

    '}'  shift, and go to state 185


State 183

   43 else: ELSE $@11 • '{' body '}'

    '{'  shift, and go to state 186


State 184

  101 return: RETURN $@19 value • ';'

    ';'  shift, and go to state 187


State 185

   19 block: FOR $@2 '(' statement ';' condition ';' statement ')' '{' body '}' •

    $default  reduce using rule 19 (block)


State 186

   43 else: ELSE $@11 '{' • body '}'

    CONSOLELOG  shift, and go to state 11
    IF          shift, and go to state 12
    WHILE       shift, and go to state 13
    LET         shift, and go to state 14
    VAR         shift, and go to state 15
    CONST       shift, and go to state 16
    FUNCTION    shift, and go to state 17
    INC         shift, and go to state 18
    DEC         shift, and go to state 19
    FOR         shift, and go to state 20
    IDENTIFIER  shift, and go to state 21

    $default  reduce using rule 14 (body)

    body         go to state 188
    block        go to state 23
    function     go to state 24
    statement    go to state 25
    declaration  go to state 26


State 187

  101 return: RETURN $@19 value ';' •

    $default  reduce using rule 101 (return)


State 188

   43 else: ELSE $@11 '{' body • '}'

    '}'  shift, and go to state 189


State 189

   43 else: ELSE $@11 '{' body '}' •

    $default  reduce using rule 43 (else)
