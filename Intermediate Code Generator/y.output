Nonterminals useless in grammar

    and_or


Terminals unused in grammar

    ELIF


Rules useless in grammar

  112 and_or: AND
  113       | OR


State 4 conflicts: 12 reduce/reduce
State 30 conflicts: 1 shift/reduce
State 58 conflicts: 1 shift/reduce
State 90 conflicts: 1 reduce/reduce
State 91 conflicts: 1 reduce/reduce
State 94 conflicts: 4 reduce/reduce
State 95 conflicts: 4 reduce/reduce
State 164 conflicts: 2 shift/reduce
State 165 conflicts: 2 shift/reduce
State 184 conflicts: 2 reduce/reduce


Grammar

    0 $accept: main $end

    1 main: importList body

    2 importList: imports importList
    3           | imports
    4           | ε

    5 imports: IMPORT '{' moduleList '}' FROM STRINGVALUE ';'
    6        | IMPORT '{' modules '}' AS IDENTIFIER FROM STRINGVALUE ';'
    7        | IMPORT moduleList FROM STRINGVALUE ';'
    8        | IMPORT modules AS IDENTIFIER FROM STRINGVALUE ';'

    9 moduleList: moduleList ',' moduleList
   10           | modules

   11 modules: IDENTIFIER
   12        | MULT

   13 body: block body
   14     | ε

   15 block: function
   16      | procedure

   17 $@1: ε

   18 $@2: ε

   19 block: WHILE $@1 '(' condition ')' $@2 '{' body '}'

   20 $@3: ε

   21 block: FOR $@3 '(' statement ';' condition ';' statement ')' '{' body '}'

   22 $@4: ε

   23 $@5: ε

   24 $@6: ε

   25 block: IF $@4 '(' condition ')' $@5 '{' body '}' $@6 else
   26      | statement ';'

   27 $@7: ε

   28 block: CONSOLELOG $@7 '(' console_outputs ')' ';'

   29 console_outputs: STRINGVALUE
   30                | IDENTIFIER
   31                | expression

   32 $@8: ε

   33 $@9: ε

   34 function: FUNCTION $@8 IDENTIFIER $@9 '(' parameterList ')' '{' body return '}'

   35 procedure: IDENTIFIER '(' argumentList ')' ';'

   36 argumentList: argument ',' argumentList
   37             | argument
   38             | ε

   39 $@10: ε

   40 argument: IDENTIFIER $@10

   41 parameterList: parameter ',' parameterList
   42              | parameter
   43              | ε

   44 $@11: ε

   45 $@12: ε

   46 parameter: IDENTIFIER $@11 ':' datatype $@12

   47 datatype: NUMBERTYPE
   48         | STRINGTYPE
   49         | BOOLEANTYPE

   50 $@13: ε

   51 else: ELSE $@13 '{' body '}'
   52     | ε

   53 M: ε

   54 condition: condition AND M condition
   55          | condition OR M condition
   56          | value relop value
   57          | '(' condition ')'
   58          | value

   59 $@14: ε

   60 condition: TRUE $@14

   61 $@15: ε

   62 condition: FALSE $@15

   63 $@16: ε

   64 $@17: ε

   65 statement: declaration IDENTIFIER $@16 ':' datatype $@17 init
   66          | IDENTIFIER '=' expression
   67          | IDENTIFIER relop expression
   68          | IDENTIFIER INC
   69          | IDENTIFIER DEC
   70          | INC IDENTIFIER
   71          | DEC IDENTIFIER

   72 declaration: LET
   73            | VAR
   74            | CONST

   75 init: '=' value
   76     | '=' expression
   77     | ε

   78 expression: expression addops term
   79           | term

   80 term: term mulops factor
   81     | factor

   82 factor: base exponent base
   83       | LOG '(' value ',' value ')'
   84       | base

   85 base: value
   86     | '(' expression ')'

   87 exponent: POW

   88 mulops: MULT
   89       | DIV

   90 addops: ADD
   91       | SUB

   92 relop: LT
   93      | GT
   94      | LE
   95      | GE
   96      | EQ
   97      | NE

   98 number: INTEGER
   99       | FLOAT

  100 value: number
  101      | IDENTIFIER
  102      | STRINGVALUE

  103 $@18: ε

  104 value: TRUE $@18

  105 $@19: ε

  106 value: FALSE $@19

  107 $@20: ε

  108 value: SCAN $@20 '(' ')'

  109 $@21: ε

  110 return: RETURN $@21 value ';'
  111       | ε


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 19 21 25 28 34 35 57 83 86 108
    ')' (41) 19 21 25 28 34 35 57 83 86 108
    ',' (44) 9 36 41 83
    ':' (58) 46 65
    ';' (59) 5 6 7 8 21 26 28 35 110
    '=' (61) 66 75 76
    '{' (123) 5 6 19 21 25 34 51
    '}' (125) 5 6 19 21 25 34 51
    error (256)
    IMPORT <treeNode> (258) 5 6 7 8
    FROM <treeNode> (259) 5 6 7 8
    AS <treeNode> (260) 6 8
    CONSOLELOG <treeNode> (261) 28
    SCAN <treeNode> (262) 108
    IF <treeNode> (263) 25
    WHILE <treeNode> (264) 19
    ELSE <treeNode> (265) 51
    RETURN <treeNode> (266) 110
    ELIF <treeNode> (267)
    LET <treeNode> (268) 72
    VAR <treeNode> (269) 73
    CONST <treeNode> (270) 74
    ADD <treeNode> (271) 90
    SUB <treeNode> (272) 91
    MULT <treeNode> (273) 12 88
    DIV <treeNode> (274) 89
    LOG <treeNode> (275) 83
    GE <treeNode> (276) 95
    LE <treeNode> (277) 94
    GT <treeNode> (278) 93
    LT <treeNode> (279) 92
    EQ <treeNode> (280) 96
    NE <treeNode> (281) 97
    TRUE <treeNode> (282) 60 104
    FALSE <treeNode> (283) 62 106
    AND <treeNode> (284) 54
    OR <treeNode> (285) 55
    NUMBERTYPE <treeNode> (286) 47
    STRINGTYPE <treeNode> (287) 48
    BOOLEANTYPE <treeNode> (288) 49
    FUNCTION <treeNode> (289) 34
    INTEGER <treeNode> (290) 98
    FLOAT <treeNode> (291) 99
    STRINGVALUE <treeNode> (292) 5 6 7 8 29 102
    INC <treeNode> (293) 68 70
    DEC <treeNode> (294) 69 71
    FOR <treeNode> (295) 21
    POW <treeNode2> (296) 87
    IDENTIFIER <treeNode2> (297) 6 8 11 30 34 35 40 46 65 66 67 68 69 70 71 101


Nonterminals, with rules where they appear

    $accept (51)
        on left: 0
    main <treeNode> (52)
        on left: 1
        on right: 0
    importList <treeNode> (53)
        on left: 2 3 4
        on right: 1 2
    imports <treeNode> (54)
        on left: 5 6 7 8
        on right: 2 3
    moduleList <treeNode> (55)
        on left: 9 10
        on right: 5 7 9
    modules <treeNode> (56)
        on left: 11 12
        on right: 6 8 10
    body <treeNode> (57)
        on left: 13 14
        on right: 1 13 19 21 25 34 51
    block <treeNode> (58)
        on left: 15 16 19 21 25 26 28
        on right: 13
    $@1 (59)
        on left: 17
        on right: 19
    $@2 (60)
        on left: 18
        on right: 19
    $@3 (61)
        on left: 20
        on right: 21
    $@4 (62)
        on left: 22
        on right: 25
    $@5 (63)
        on left: 23
        on right: 25
    $@6 (64)
        on left: 24
        on right: 25
    $@7 (65)
        on left: 27
        on right: 28
    console_outputs <treeNode> (66)
        on left: 29 30 31
        on right: 28
    function <treeNode2> (67)
        on left: 34
        on right: 15
    $@8 (68)
        on left: 32
        on right: 34
    $@9 (69)
        on left: 33
        on right: 34
    procedure <treeNode2> (70)
        on left: 35
        on right: 16
    argumentList <treeNode> (71)
        on left: 36 37 38
        on right: 35 36
    argument <treeNode> (72)
        on left: 40
        on right: 36 37
    $@10 (73)
        on left: 39
        on right: 40
    parameterList <treeNode> (74)
        on left: 41 42 43
        on right: 34 41
    parameter <treeNode> (75)
        on left: 46
        on right: 41 42
    $@11 (76)
        on left: 44
        on right: 46
    $@12 (77)
        on left: 45
        on right: 46
    datatype <treeNode> (78)
        on left: 47 48 49
        on right: 46 65
    else <treeNode> (79)
        on left: 51 52
        on right: 25
    $@13 (80)
        on left: 50
        on right: 51
    M <treeNode4> (81)
        on left: 53
        on right: 54 55
    condition <treeNode3> (82)
        on left: 54 55 56 57 58 60 62
        on right: 19 21 25 54 55 57
    $@14 (83)
        on left: 59
        on right: 60
    $@15 (84)
        on left: 61
        on right: 62
    statement <treeNode> (85)
        on left: 65 66 67 68 69 70 71
        on right: 21 26
    $@16 (86)
        on left: 63
        on right: 65
    $@17 (87)
        on left: 64
        on right: 65
    declaration <treeNode> (88)
        on left: 72 73 74
        on right: 65
    init <treeNode2> (89)
        on left: 75 76 77
        on right: 65
    expression <treeNode2> (90)
        on left: 78 79
        on right: 31 66 67 76 78 86
    term <treeNode2> (91)
        on left: 80 81
        on right: 78 79 80
    factor <treeNode2> (92)
        on left: 82 83 84
        on right: 80 81
    base <treeNode2> (93)
        on left: 85 86
        on right: 82 84
    exponent <treeNode2> (94)
        on left: 87
        on right: 82
    mulops <treeNode> (95)
        on left: 88 89
        on right: 80
    addops <treeNode> (96)
        on left: 90 91
        on right: 78
    relop <treeNode> (97)
        on left: 92 93 94 95 96 97
        on right: 56 67
    number <treeNode2> (98)
        on left: 98 99
        on right: 100
    value <treeNode2> (99)
        on left: 100 101 102 104 106 108
        on right: 56 58 75 83 85 110
    $@18 (100)
        on left: 103
        on right: 104
    $@19 (101)
        on left: 105
        on right: 106
    $@20 (102)
        on left: 107
        on right: 108
    return <treeNode> (103)
        on left: 110 111
        on right: 34
    $@21 (104)
        on left: 109
        on right: 110


State 0

    0 $accept: • main $end

    IMPORT  shift, and go to state 1

    $default  reduce using rule 4 (importList)

    main        go to state 2
    importList  go to state 3
    imports     go to state 4


State 1

    5 imports: IMPORT • '{' moduleList '}' FROM STRINGVALUE ';'
    6        | IMPORT • '{' modules '}' AS IDENTIFIER FROM STRINGVALUE ';'
    7        | IMPORT • moduleList FROM STRINGVALUE ';'
    8        | IMPORT • modules AS IDENTIFIER FROM STRINGVALUE ';'

    MULT        shift, and go to state 5
    IDENTIFIER  shift, and go to state 6
    '{'         shift, and go to state 7

    moduleList  go to state 8
    modules     go to state 9


State 2

    0 $accept: main • $end

    $end  shift, and go to state 10


State 3

    1 main: importList • body

    CONSOLELOG  shift, and go to state 11
    IF          shift, and go to state 12
    WHILE       shift, and go to state 13
    LET         shift, and go to state 14
    VAR         shift, and go to state 15
    CONST       shift, and go to state 16
    FUNCTION    shift, and go to state 17
    INC         shift, and go to state 18
    DEC         shift, and go to state 19
    FOR         shift, and go to state 20
    IDENTIFIER  shift, and go to state 21

    $default  reduce using rule 14 (body)

    body         go to state 22
    block        go to state 23
    function     go to state 24
    procedure    go to state 25
    statement    go to state 26
    declaration  go to state 27


State 4

    2 importList: imports • importList
    3           | imports •

    IMPORT  shift, and go to state 1

    $end        reduce using rule 3 (importList)
    $end        [reduce using rule 4 (importList)]
    CONSOLELOG  reduce using rule 3 (importList)
    CONSOLELOG  [reduce using rule 4 (importList)]
    IF          reduce using rule 3 (importList)
    IF          [reduce using rule 4 (importList)]
    WHILE       reduce using rule 3 (importList)
    WHILE       [reduce using rule 4 (importList)]
    LET         reduce using rule 3 (importList)
    LET         [reduce using rule 4 (importList)]
    VAR         reduce using rule 3 (importList)
    VAR         [reduce using rule 4 (importList)]
    CONST       reduce using rule 3 (importList)
    CONST       [reduce using rule 4 (importList)]
    FUNCTION    reduce using rule 3 (importList)
    FUNCTION    [reduce using rule 4 (importList)]
    INC         reduce using rule 3 (importList)
    INC         [reduce using rule 4 (importList)]
    DEC         reduce using rule 3 (importList)
    DEC         [reduce using rule 4 (importList)]
    FOR         reduce using rule 3 (importList)
    FOR         [reduce using rule 4 (importList)]
    IDENTIFIER  reduce using rule 3 (importList)
    IDENTIFIER  [reduce using rule 4 (importList)]
    $default    reduce using rule 3 (importList)

    importList  go to state 28
    imports     go to state 4


State 5

   12 modules: MULT •

    $default  reduce using rule 12 (modules)


State 6

   11 modules: IDENTIFIER •

    $default  reduce using rule 11 (modules)


State 7

    5 imports: IMPORT '{' • moduleList '}' FROM STRINGVALUE ';'
    6        | IMPORT '{' • modules '}' AS IDENTIFIER FROM STRINGVALUE ';'

    MULT        shift, and go to state 5
    IDENTIFIER  shift, and go to state 6

    moduleList  go to state 29
    modules     go to state 30


State 8

    7 imports: IMPORT moduleList • FROM STRINGVALUE ';'
    9 moduleList: moduleList • ',' moduleList

    FROM  shift, and go to state 31
    ','   shift, and go to state 32


State 9

    8 imports: IMPORT modules • AS IDENTIFIER FROM STRINGVALUE ';'
   10 moduleList: modules •

    AS  shift, and go to state 33

    $default  reduce using rule 10 (moduleList)


State 10

    0 $accept: main $end •

    $default  accept


State 11

   28 block: CONSOLELOG • $@7 '(' console_outputs ')' ';'

    $default  reduce using rule 27 ($@7)

    $@7  go to state 34


State 12

   25 block: IF • $@4 '(' condition ')' $@5 '{' body '}' $@6 else

    $default  reduce using rule 22 ($@4)

    $@4  go to state 35


State 13

   19 block: WHILE • $@1 '(' condition ')' $@2 '{' body '}'

    $default  reduce using rule 17 ($@1)

    $@1  go to state 36


State 14

   72 declaration: LET •

    $default  reduce using rule 72 (declaration)


State 15

   73 declaration: VAR •

    $default  reduce using rule 73 (declaration)


State 16

   74 declaration: CONST •

    $default  reduce using rule 74 (declaration)


State 17

   34 function: FUNCTION • $@8 IDENTIFIER $@9 '(' parameterList ')' '{' body return '}'

    $default  reduce using rule 32 ($@8)

    $@8  go to state 37


State 18

   70 statement: INC • IDENTIFIER

    IDENTIFIER  shift, and go to state 38


State 19

   71 statement: DEC • IDENTIFIER

    IDENTIFIER  shift, and go to state 39


State 20

   21 block: FOR • $@3 '(' statement ';' condition ';' statement ')' '{' body '}'

    $default  reduce using rule 20 ($@3)

    $@3  go to state 40


State 21

   35 procedure: IDENTIFIER • '(' argumentList ')' ';'
   66 statement: IDENTIFIER • '=' expression
   67          | IDENTIFIER • relop expression
   68          | IDENTIFIER • INC
   69          | IDENTIFIER • DEC

    GE   shift, and go to state 41
    LE   shift, and go to state 42
    GT   shift, and go to state 43
    LT   shift, and go to state 44
    EQ   shift, and go to state 45
    NE   shift, and go to state 46
    INC  shift, and go to state 47
    DEC  shift, and go to state 48
    '('  shift, and go to state 49
    '='  shift, and go to state 50

    relop  go to state 51


State 22

    1 main: importList body •

    $default  reduce using rule 1 (main)


State 23

   13 body: block • body

    CONSOLELOG  shift, and go to state 11
    IF          shift, and go to state 12
    WHILE       shift, and go to state 13
    LET         shift, and go to state 14
    VAR         shift, and go to state 15
    CONST       shift, and go to state 16
    FUNCTION    shift, and go to state 17
    INC         shift, and go to state 18
    DEC         shift, and go to state 19
    FOR         shift, and go to state 20
    IDENTIFIER  shift, and go to state 21

    $default  reduce using rule 14 (body)

    body         go to state 52
    block        go to state 23
    function     go to state 24
    procedure    go to state 25
    statement    go to state 26
    declaration  go to state 27


State 24

   15 block: function •

    $default  reduce using rule 15 (block)


State 25

   16 block: procedure •

    $default  reduce using rule 16 (block)


State 26

   26 block: statement • ';'

    ';'  shift, and go to state 53


State 27

   65 statement: declaration • IDENTIFIER $@16 ':' datatype $@17 init

    IDENTIFIER  shift, and go to state 54


State 28

    2 importList: imports importList •

    $default  reduce using rule 2 (importList)


State 29

    5 imports: IMPORT '{' moduleList • '}' FROM STRINGVALUE ';'
    9 moduleList: moduleList • ',' moduleList

    '}'  shift, and go to state 55
    ','  shift, and go to state 32


State 30

    6 imports: IMPORT '{' modules • '}' AS IDENTIFIER FROM STRINGVALUE ';'
   10 moduleList: modules •

    '}'  shift, and go to state 56

    '}'       [reduce using rule 10 (moduleList)]
    $default  reduce using rule 10 (moduleList)


State 31

    7 imports: IMPORT moduleList FROM • STRINGVALUE ';'

    STRINGVALUE  shift, and go to state 57


State 32

    9 moduleList: moduleList ',' • moduleList

    MULT        shift, and go to state 5
    IDENTIFIER  shift, and go to state 6

    moduleList  go to state 58
    modules     go to state 59


State 33

    8 imports: IMPORT modules AS • IDENTIFIER FROM STRINGVALUE ';'

    IDENTIFIER  shift, and go to state 60


State 34

   28 block: CONSOLELOG $@7 • '(' console_outputs ')' ';'

    '('  shift, and go to state 61


State 35

   25 block: IF $@4 • '(' condition ')' $@5 '{' body '}' $@6 else

    '('  shift, and go to state 62


State 36

   19 block: WHILE $@1 • '(' condition ')' $@2 '{' body '}'

    '('  shift, and go to state 63


State 37

   34 function: FUNCTION $@8 • IDENTIFIER $@9 '(' parameterList ')' '{' body return '}'

    IDENTIFIER  shift, and go to state 64


State 38

   70 statement: INC IDENTIFIER •

    $default  reduce using rule 70 (statement)


State 39

   71 statement: DEC IDENTIFIER •

    $default  reduce using rule 71 (statement)


State 40

   21 block: FOR $@3 • '(' statement ';' condition ';' statement ')' '{' body '}'

    '('  shift, and go to state 65


State 41

   95 relop: GE •

    $default  reduce using rule 95 (relop)


State 42

   94 relop: LE •

    $default  reduce using rule 94 (relop)


State 43

   93 relop: GT •

    $default  reduce using rule 93 (relop)


State 44

   92 relop: LT •

    $default  reduce using rule 92 (relop)


State 45

   96 relop: EQ •

    $default  reduce using rule 96 (relop)


State 46

   97 relop: NE •

    $default  reduce using rule 97 (relop)


State 47

   68 statement: IDENTIFIER INC •

    $default  reduce using rule 68 (statement)


State 48

   69 statement: IDENTIFIER DEC •

    $default  reduce using rule 69 (statement)


State 49

   35 procedure: IDENTIFIER '(' • argumentList ')' ';'

    IDENTIFIER  shift, and go to state 66

    $default  reduce using rule 38 (argumentList)

    argumentList  go to state 67
    argument      go to state 68


State 50

   66 statement: IDENTIFIER '=' • expression

    SCAN         shift, and go to state 69
    LOG          shift, and go to state 70
    TRUE         shift, and go to state 71
    FALSE        shift, and go to state 72
    INTEGER      shift, and go to state 73
    FLOAT        shift, and go to state 74
    STRINGVALUE  shift, and go to state 75
    IDENTIFIER   shift, and go to state 76
    '('          shift, and go to state 77

    expression  go to state 78
    term        go to state 79
    factor      go to state 80
    base        go to state 81
    number      go to state 82
    value       go to state 83


State 51

   67 statement: IDENTIFIER relop • expression

    SCAN         shift, and go to state 69
    LOG          shift, and go to state 70
    TRUE         shift, and go to state 71
    FALSE        shift, and go to state 72
    INTEGER      shift, and go to state 73
    FLOAT        shift, and go to state 74
    STRINGVALUE  shift, and go to state 75
    IDENTIFIER   shift, and go to state 76
    '('          shift, and go to state 77

    expression  go to state 84
    term        go to state 79
    factor      go to state 80
    base        go to state 81
    number      go to state 82
    value       go to state 83


State 52

   13 body: block body •

    $default  reduce using rule 13 (body)


State 53

   26 block: statement ';' •

    $default  reduce using rule 26 (block)


State 54

   65 statement: declaration IDENTIFIER • $@16 ':' datatype $@17 init

    $default  reduce using rule 63 ($@16)

    $@16  go to state 85


State 55

    5 imports: IMPORT '{' moduleList '}' • FROM STRINGVALUE ';'

    FROM  shift, and go to state 86


State 56

    6 imports: IMPORT '{' modules '}' • AS IDENTIFIER FROM STRINGVALUE ';'

    AS  shift, and go to state 87


State 57

    7 imports: IMPORT moduleList FROM STRINGVALUE • ';'

    ';'  shift, and go to state 88


State 58

    9 moduleList: moduleList • ',' moduleList
    9           | moduleList ',' moduleList •

    ','  shift, and go to state 32

    ','       [reduce using rule 9 (moduleList)]
    $default  reduce using rule 9 (moduleList)


State 59

   10 moduleList: modules •

    $default  reduce using rule 10 (moduleList)


State 60

    8 imports: IMPORT modules AS IDENTIFIER • FROM STRINGVALUE ';'

    FROM  shift, and go to state 89


State 61

   28 block: CONSOLELOG $@7 '(' • console_outputs ')' ';'

    SCAN         shift, and go to state 69
    LOG          shift, and go to state 70
    TRUE         shift, and go to state 71
    FALSE        shift, and go to state 72
    INTEGER      shift, and go to state 73
    FLOAT        shift, and go to state 74
    STRINGVALUE  shift, and go to state 90
    IDENTIFIER   shift, and go to state 91
    '('          shift, and go to state 77

    console_outputs  go to state 92
    expression       go to state 93
    term             go to state 79
    factor           go to state 80
    base             go to state 81
    number           go to state 82
    value            go to state 83


State 62

   25 block: IF $@4 '(' • condition ')' $@5 '{' body '}' $@6 else

    SCAN         shift, and go to state 69
    TRUE         shift, and go to state 94
    FALSE        shift, and go to state 95
    INTEGER      shift, and go to state 73
    FLOAT        shift, and go to state 74
    STRINGVALUE  shift, and go to state 75
    IDENTIFIER   shift, and go to state 76
    '('          shift, and go to state 96

    condition  go to state 97
    number     go to state 82
    value      go to state 98


State 63

   19 block: WHILE $@1 '(' • condition ')' $@2 '{' body '}'

    SCAN         shift, and go to state 69
    TRUE         shift, and go to state 94
    FALSE        shift, and go to state 95
    INTEGER      shift, and go to state 73
    FLOAT        shift, and go to state 74
    STRINGVALUE  shift, and go to state 75
    IDENTIFIER   shift, and go to state 76
    '('          shift, and go to state 96

    condition  go to state 99
    number     go to state 82
    value      go to state 98


State 64

   34 function: FUNCTION $@8 IDENTIFIER • $@9 '(' parameterList ')' '{' body return '}'

    $default  reduce using rule 33 ($@9)

    $@9  go to state 100


State 65

   21 block: FOR $@3 '(' • statement ';' condition ';' statement ')' '{' body '}'

    LET         shift, and go to state 14
    VAR         shift, and go to state 15
    CONST       shift, and go to state 16
    INC         shift, and go to state 18
    DEC         shift, and go to state 19
    IDENTIFIER  shift, and go to state 101

    statement    go to state 102
    declaration  go to state 27


State 66

   40 argument: IDENTIFIER • $@10

    $default  reduce using rule 39 ($@10)

    $@10  go to state 103


State 67

   35 procedure: IDENTIFIER '(' argumentList • ')' ';'

    ')'  shift, and go to state 104


State 68

   36 argumentList: argument • ',' argumentList
   37             | argument •

    ','  shift, and go to state 105

    $default  reduce using rule 37 (argumentList)


State 69

  108 value: SCAN • $@20 '(' ')'

    $default  reduce using rule 107 ($@20)

    $@20  go to state 106


State 70

   83 factor: LOG • '(' value ',' value ')'

    '('  shift, and go to state 107


State 71

  104 value: TRUE • $@18

    $default  reduce using rule 103 ($@18)

    $@18  go to state 108


State 72

  106 value: FALSE • $@19

    $default  reduce using rule 105 ($@19)

    $@19  go to state 109


State 73

   98 number: INTEGER •

    $default  reduce using rule 98 (number)


State 74

   99 number: FLOAT •

    $default  reduce using rule 99 (number)


State 75

  102 value: STRINGVALUE •

    $default  reduce using rule 102 (value)


State 76

  101 value: IDENTIFIER •

    $default  reduce using rule 101 (value)


State 77

   86 base: '(' • expression ')'

    SCAN         shift, and go to state 69
    LOG          shift, and go to state 70
    TRUE         shift, and go to state 71
    FALSE        shift, and go to state 72
    INTEGER      shift, and go to state 73
    FLOAT        shift, and go to state 74
    STRINGVALUE  shift, and go to state 75
    IDENTIFIER   shift, and go to state 76
    '('          shift, and go to state 77

    expression  go to state 110
    term        go to state 79
    factor      go to state 80
    base        go to state 81
    number      go to state 82
    value       go to state 83


State 78

   66 statement: IDENTIFIER '=' expression •
   78 expression: expression • addops term

    ADD  shift, and go to state 111
    SUB  shift, and go to state 112

    $default  reduce using rule 66 (statement)

    addops  go to state 113


State 79

   79 expression: term •
   80 term: term • mulops factor

    MULT  shift, and go to state 114
    DIV   shift, and go to state 115

    $default  reduce using rule 79 (expression)

    mulops  go to state 116


State 80

   81 term: factor •

    $default  reduce using rule 81 (term)


State 81

   82 factor: base • exponent base
   84       | base •

    POW  shift, and go to state 117

    $default  reduce using rule 84 (factor)

    exponent  go to state 118


State 82

  100 value: number •

    $default  reduce using rule 100 (value)


State 83

   85 base: value •

    $default  reduce using rule 85 (base)


State 84

   67 statement: IDENTIFIER relop expression •
   78 expression: expression • addops term

    ADD  shift, and go to state 111
    SUB  shift, and go to state 112

    $default  reduce using rule 67 (statement)

    addops  go to state 113


State 85

   65 statement: declaration IDENTIFIER $@16 • ':' datatype $@17 init

    ':'  shift, and go to state 119


State 86

    5 imports: IMPORT '{' moduleList '}' FROM • STRINGVALUE ';'

    STRINGVALUE  shift, and go to state 120


State 87

    6 imports: IMPORT '{' modules '}' AS • IDENTIFIER FROM STRINGVALUE ';'

    IDENTIFIER  shift, and go to state 121


State 88

    7 imports: IMPORT moduleList FROM STRINGVALUE ';' •

    $default  reduce using rule 7 (imports)


State 89

    8 imports: IMPORT modules AS IDENTIFIER FROM • STRINGVALUE ';'

    STRINGVALUE  shift, and go to state 122


State 90

   29 console_outputs: STRINGVALUE •
  102 value: STRINGVALUE •

    ')'       reduce using rule 29 (console_outputs)
    ')'       [reduce using rule 102 (value)]
    $default  reduce using rule 102 (value)


State 91

   30 console_outputs: IDENTIFIER •
  101 value: IDENTIFIER •

    ')'       reduce using rule 30 (console_outputs)
    ')'       [reduce using rule 101 (value)]
    $default  reduce using rule 101 (value)


State 92

   28 block: CONSOLELOG $@7 '(' console_outputs • ')' ';'

    ')'  shift, and go to state 123


State 93

   31 console_outputs: expression •
   78 expression: expression • addops term

    ADD  shift, and go to state 111
    SUB  shift, and go to state 112

    $default  reduce using rule 31 (console_outputs)

    addops  go to state 113


State 94

   60 condition: TRUE • $@14
  104 value: TRUE • $@18

    AND       reduce using rule 59 ($@14)
    AND       [reduce using rule 103 ($@18)]
    OR        reduce using rule 59 ($@14)
    OR        [reduce using rule 103 ($@18)]
    ';'       reduce using rule 59 ($@14)
    ';'       [reduce using rule 103 ($@18)]
    ')'       reduce using rule 59 ($@14)
    ')'       [reduce using rule 103 ($@18)]
    $default  reduce using rule 103 ($@18)

    $@14  go to state 124
    $@18  go to state 108


State 95

   62 condition: FALSE • $@15
  106 value: FALSE • $@19

    AND       reduce using rule 61 ($@15)
    AND       [reduce using rule 105 ($@19)]
    OR        reduce using rule 61 ($@15)
    OR        [reduce using rule 105 ($@19)]
    ';'       reduce using rule 61 ($@15)
    ';'       [reduce using rule 105 ($@19)]
    ')'       reduce using rule 61 ($@15)
    ')'       [reduce using rule 105 ($@19)]
    $default  reduce using rule 105 ($@19)

    $@15  go to state 125
    $@19  go to state 109


State 96

   57 condition: '(' • condition ')'

    SCAN         shift, and go to state 69
    TRUE         shift, and go to state 94
    FALSE        shift, and go to state 95
    INTEGER      shift, and go to state 73
    FLOAT        shift, and go to state 74
    STRINGVALUE  shift, and go to state 75
    IDENTIFIER   shift, and go to state 76
    '('          shift, and go to state 96

    condition  go to state 126
    number     go to state 82
    value      go to state 98


State 97

   25 block: IF $@4 '(' condition • ')' $@5 '{' body '}' $@6 else
   54 condition: condition • AND M condition
   55          | condition • OR M condition

    AND  shift, and go to state 127
    OR   shift, and go to state 128
    ')'  shift, and go to state 129


State 98

   56 condition: value • relop value
   58          | value •

    GE  shift, and go to state 41
    LE  shift, and go to state 42
    GT  shift, and go to state 43
    LT  shift, and go to state 44
    EQ  shift, and go to state 45
    NE  shift, and go to state 46

    $default  reduce using rule 58 (condition)

    relop  go to state 130


State 99

   19 block: WHILE $@1 '(' condition • ')' $@2 '{' body '}'
   54 condition: condition • AND M condition
   55          | condition • OR M condition

    AND  shift, and go to state 127
    OR   shift, and go to state 128
    ')'  shift, and go to state 131


State 100

   34 function: FUNCTION $@8 IDENTIFIER $@9 • '(' parameterList ')' '{' body return '}'

    '('  shift, and go to state 132


State 101

   66 statement: IDENTIFIER • '=' expression
   67          | IDENTIFIER • relop expression
   68          | IDENTIFIER • INC
   69          | IDENTIFIER • DEC

    GE   shift, and go to state 41
    LE   shift, and go to state 42
    GT   shift, and go to state 43
    LT   shift, and go to state 44
    EQ   shift, and go to state 45
    NE   shift, and go to state 46
    INC  shift, and go to state 47
    DEC  shift, and go to state 48
    '='  shift, and go to state 50

    relop  go to state 51


State 102

   21 block: FOR $@3 '(' statement • ';' condition ';' statement ')' '{' body '}'

    ';'  shift, and go to state 133


State 103

   40 argument: IDENTIFIER $@10 •

    $default  reduce using rule 40 (argument)


State 104

   35 procedure: IDENTIFIER '(' argumentList ')' • ';'

    ';'  shift, and go to state 134


State 105

   36 argumentList: argument ',' • argumentList

    IDENTIFIER  shift, and go to state 66

    $default  reduce using rule 38 (argumentList)

    argumentList  go to state 135
    argument      go to state 68


State 106

  108 value: SCAN $@20 • '(' ')'

    '('  shift, and go to state 136


State 107

   83 factor: LOG '(' • value ',' value ')'

    SCAN         shift, and go to state 69
    TRUE         shift, and go to state 71
    FALSE        shift, and go to state 72
    INTEGER      shift, and go to state 73
    FLOAT        shift, and go to state 74
    STRINGVALUE  shift, and go to state 75
    IDENTIFIER   shift, and go to state 76

    number  go to state 82
    value   go to state 137


State 108

  104 value: TRUE $@18 •

    $default  reduce using rule 104 (value)


State 109

  106 value: FALSE $@19 •

    $default  reduce using rule 106 (value)


State 110

   78 expression: expression • addops term
   86 base: '(' expression • ')'

    ADD  shift, and go to state 111
    SUB  shift, and go to state 112
    ')'  shift, and go to state 138

    addops  go to state 113


State 111

   90 addops: ADD •

    $default  reduce using rule 90 (addops)


State 112

   91 addops: SUB •

    $default  reduce using rule 91 (addops)


State 113

   78 expression: expression addops • term

    SCAN         shift, and go to state 69
    LOG          shift, and go to state 70
    TRUE         shift, and go to state 71
    FALSE        shift, and go to state 72
    INTEGER      shift, and go to state 73
    FLOAT        shift, and go to state 74
    STRINGVALUE  shift, and go to state 75
    IDENTIFIER   shift, and go to state 76
    '('          shift, and go to state 77

    term    go to state 139
    factor  go to state 80
    base    go to state 81
    number  go to state 82
    value   go to state 83


State 114

   88 mulops: MULT •

    $default  reduce using rule 88 (mulops)


State 115

   89 mulops: DIV •

    $default  reduce using rule 89 (mulops)


State 116

   80 term: term mulops • factor

    SCAN         shift, and go to state 69
    LOG          shift, and go to state 70
    TRUE         shift, and go to state 71
    FALSE        shift, and go to state 72
    INTEGER      shift, and go to state 73
    FLOAT        shift, and go to state 74
    STRINGVALUE  shift, and go to state 75
    IDENTIFIER   shift, and go to state 76
    '('          shift, and go to state 77

    factor  go to state 140
    base    go to state 81
    number  go to state 82
    value   go to state 83


State 117

   87 exponent: POW •

    $default  reduce using rule 87 (exponent)


State 118

   82 factor: base exponent • base

    SCAN         shift, and go to state 69
    TRUE         shift, and go to state 71
    FALSE        shift, and go to state 72
    INTEGER      shift, and go to state 73
    FLOAT        shift, and go to state 74
    STRINGVALUE  shift, and go to state 75
    IDENTIFIER   shift, and go to state 76
    '('          shift, and go to state 77

    base    go to state 141
    number  go to state 82
    value   go to state 83


State 119

   65 statement: declaration IDENTIFIER $@16 ':' • datatype $@17 init

    NUMBERTYPE   shift, and go to state 142
    STRINGTYPE   shift, and go to state 143
    BOOLEANTYPE  shift, and go to state 144

    datatype  go to state 145


State 120

    5 imports: IMPORT '{' moduleList '}' FROM STRINGVALUE • ';'

    ';'  shift, and go to state 146


State 121

    6 imports: IMPORT '{' modules '}' AS IDENTIFIER • FROM STRINGVALUE ';'

    FROM  shift, and go to state 147


State 122

    8 imports: IMPORT modules AS IDENTIFIER FROM STRINGVALUE • ';'

    ';'  shift, and go to state 148


State 123

   28 block: CONSOLELOG $@7 '(' console_outputs ')' • ';'

    ';'  shift, and go to state 149


State 124

   60 condition: TRUE $@14 •

    $default  reduce using rule 60 (condition)


State 125

   62 condition: FALSE $@15 •

    $default  reduce using rule 62 (condition)


State 126

   54 condition: condition • AND M condition
   55          | condition • OR M condition
   57          | '(' condition • ')'

    AND  shift, and go to state 127
    OR   shift, and go to state 128
    ')'  shift, and go to state 150


State 127

   54 condition: condition AND • M condition

    $default  reduce using rule 53 (M)

    M  go to state 151


State 128

   55 condition: condition OR • M condition

    $default  reduce using rule 53 (M)

    M  go to state 152


State 129

   25 block: IF $@4 '(' condition ')' • $@5 '{' body '}' $@6 else

    $default  reduce using rule 23 ($@5)

    $@5  go to state 153


State 130

   56 condition: value relop • value

    SCAN         shift, and go to state 69
    TRUE         shift, and go to state 71
    FALSE        shift, and go to state 72
    INTEGER      shift, and go to state 73
    FLOAT        shift, and go to state 74
    STRINGVALUE  shift, and go to state 75
    IDENTIFIER   shift, and go to state 76

    number  go to state 82
    value   go to state 154


State 131

   19 block: WHILE $@1 '(' condition ')' • $@2 '{' body '}'

    $default  reduce using rule 18 ($@2)

    $@2  go to state 155


State 132

   34 function: FUNCTION $@8 IDENTIFIER $@9 '(' • parameterList ')' '{' body return '}'

    IDENTIFIER  shift, and go to state 156

    $default  reduce using rule 43 (parameterList)

    parameterList  go to state 157
    parameter      go to state 158


State 133

   21 block: FOR $@3 '(' statement ';' • condition ';' statement ')' '{' body '}'

    SCAN         shift, and go to state 69
    TRUE         shift, and go to state 94
    FALSE        shift, and go to state 95
    INTEGER      shift, and go to state 73
    FLOAT        shift, and go to state 74
    STRINGVALUE  shift, and go to state 75
    IDENTIFIER   shift, and go to state 76
    '('          shift, and go to state 96

    condition  go to state 159
    number     go to state 82
    value      go to state 98


State 134

   35 procedure: IDENTIFIER '(' argumentList ')' ';' •

    $default  reduce using rule 35 (procedure)


State 135

   36 argumentList: argument ',' argumentList •

    $default  reduce using rule 36 (argumentList)


State 136

  108 value: SCAN $@20 '(' • ')'

    ')'  shift, and go to state 160


State 137

   83 factor: LOG '(' value • ',' value ')'

    ','  shift, and go to state 161


State 138

   86 base: '(' expression ')' •

    $default  reduce using rule 86 (base)


State 139

   78 expression: expression addops term •
   80 term: term • mulops factor

    MULT  shift, and go to state 114
    DIV   shift, and go to state 115

    $default  reduce using rule 78 (expression)

    mulops  go to state 116


State 140

   80 term: term mulops factor •

    $default  reduce using rule 80 (term)


State 141

   82 factor: base exponent base •

    $default  reduce using rule 82 (factor)


State 142

   47 datatype: NUMBERTYPE •

    $default  reduce using rule 47 (datatype)


State 143

   48 datatype: STRINGTYPE •

    $default  reduce using rule 48 (datatype)


State 144

   49 datatype: BOOLEANTYPE •

    $default  reduce using rule 49 (datatype)


State 145

   65 statement: declaration IDENTIFIER $@16 ':' datatype • $@17 init

    $default  reduce using rule 64 ($@17)

    $@17  go to state 162


State 146

    5 imports: IMPORT '{' moduleList '}' FROM STRINGVALUE ';' •

    $default  reduce using rule 5 (imports)


State 147

    6 imports: IMPORT '{' modules '}' AS IDENTIFIER FROM • STRINGVALUE ';'

    STRINGVALUE  shift, and go to state 163


State 148

    8 imports: IMPORT modules AS IDENTIFIER FROM STRINGVALUE ';' •

    $default  reduce using rule 8 (imports)


State 149

   28 block: CONSOLELOG $@7 '(' console_outputs ')' ';' •

    $default  reduce using rule 28 (block)


State 150

   57 condition: '(' condition ')' •

    $default  reduce using rule 57 (condition)


State 151

   54 condition: condition AND M • condition

    SCAN         shift, and go to state 69
    TRUE         shift, and go to state 94
    FALSE        shift, and go to state 95
    INTEGER      shift, and go to state 73
    FLOAT        shift, and go to state 74
    STRINGVALUE  shift, and go to state 75
    IDENTIFIER   shift, and go to state 76
    '('          shift, and go to state 96

    condition  go to state 164
    number     go to state 82
    value      go to state 98


State 152

   55 condition: condition OR M • condition

    SCAN         shift, and go to state 69
    TRUE         shift, and go to state 94
    FALSE        shift, and go to state 95
    INTEGER      shift, and go to state 73
    FLOAT        shift, and go to state 74
    STRINGVALUE  shift, and go to state 75
    IDENTIFIER   shift, and go to state 76
    '('          shift, and go to state 96

    condition  go to state 165
    number     go to state 82
    value      go to state 98


State 153

   25 block: IF $@4 '(' condition ')' $@5 • '{' body '}' $@6 else

    '{'  shift, and go to state 166


State 154

   56 condition: value relop value •

    $default  reduce using rule 56 (condition)


State 155

   19 block: WHILE $@1 '(' condition ')' $@2 • '{' body '}'

    '{'  shift, and go to state 167


State 156

   46 parameter: IDENTIFIER • $@11 ':' datatype $@12

    $default  reduce using rule 44 ($@11)

    $@11  go to state 168


State 157

   34 function: FUNCTION $@8 IDENTIFIER $@9 '(' parameterList • ')' '{' body return '}'

    ')'  shift, and go to state 169


State 158

   41 parameterList: parameter • ',' parameterList
   42              | parameter •

    ','  shift, and go to state 170

    $default  reduce using rule 42 (parameterList)


State 159

   21 block: FOR $@3 '(' statement ';' condition • ';' statement ')' '{' body '}'
   54 condition: condition • AND M condition
   55          | condition • OR M condition

    AND  shift, and go to state 127
    OR   shift, and go to state 128
    ';'  shift, and go to state 171


State 160

  108 value: SCAN $@20 '(' ')' •

    $default  reduce using rule 108 (value)


State 161

   83 factor: LOG '(' value ',' • value ')'

    SCAN         shift, and go to state 69
    TRUE         shift, and go to state 71
    FALSE        shift, and go to state 72
    INTEGER      shift, and go to state 73
    FLOAT        shift, and go to state 74
    STRINGVALUE  shift, and go to state 75
    IDENTIFIER   shift, and go to state 76

    number  go to state 82
    value   go to state 172


State 162

   65 statement: declaration IDENTIFIER $@16 ':' datatype $@17 • init

    '='  shift, and go to state 173

    $default  reduce using rule 77 (init)

    init  go to state 174


State 163

    6 imports: IMPORT '{' modules '}' AS IDENTIFIER FROM STRINGVALUE • ';'

    ';'  shift, and go to state 175


State 164

   54 condition: condition • AND M condition
   54          | condition AND M condition •
   55          | condition • OR M condition

    AND  shift, and go to state 127
    OR   shift, and go to state 128

    AND       [reduce using rule 54 (condition)]
    OR        [reduce using rule 54 (condition)]
    $default  reduce using rule 54 (condition)


State 165

   54 condition: condition • AND M condition
   55          | condition • OR M condition
   55          | condition OR M condition •

    AND  shift, and go to state 127
    OR   shift, and go to state 128

    AND       [reduce using rule 55 (condition)]
    OR        [reduce using rule 55 (condition)]
    $default  reduce using rule 55 (condition)


State 166

   25 block: IF $@4 '(' condition ')' $@5 '{' • body '}' $@6 else

    CONSOLELOG  shift, and go to state 11
    IF          shift, and go to state 12
    WHILE       shift, and go to state 13
    LET         shift, and go to state 14
    VAR         shift, and go to state 15
    CONST       shift, and go to state 16
    FUNCTION    shift, and go to state 17
    INC         shift, and go to state 18
    DEC         shift, and go to state 19
    FOR         shift, and go to state 20
    IDENTIFIER  shift, and go to state 21

    $default  reduce using rule 14 (body)

    body         go to state 176
    block        go to state 23
    function     go to state 24
    procedure    go to state 25
    statement    go to state 26
    declaration  go to state 27


State 167

   19 block: WHILE $@1 '(' condition ')' $@2 '{' • body '}'

    CONSOLELOG  shift, and go to state 11
    IF          shift, and go to state 12
    WHILE       shift, and go to state 13
    LET         shift, and go to state 14
    VAR         shift, and go to state 15
    CONST       shift, and go to state 16
    FUNCTION    shift, and go to state 17
    INC         shift, and go to state 18
    DEC         shift, and go to state 19
    FOR         shift, and go to state 20
    IDENTIFIER  shift, and go to state 21

    $default  reduce using rule 14 (body)

    body         go to state 177
    block        go to state 23
    function     go to state 24
    procedure    go to state 25
    statement    go to state 26
    declaration  go to state 27


State 168

   46 parameter: IDENTIFIER $@11 • ':' datatype $@12

    ':'  shift, and go to state 178


State 169

   34 function: FUNCTION $@8 IDENTIFIER $@9 '(' parameterList ')' • '{' body return '}'

    '{'  shift, and go to state 179


State 170

   41 parameterList: parameter ',' • parameterList

    IDENTIFIER  shift, and go to state 156

    $default  reduce using rule 43 (parameterList)

    parameterList  go to state 180
    parameter      go to state 158


State 171

   21 block: FOR $@3 '(' statement ';' condition ';' • statement ')' '{' body '}'

    LET         shift, and go to state 14
    VAR         shift, and go to state 15
    CONST       shift, and go to state 16
    INC         shift, and go to state 18
    DEC         shift, and go to state 19
    IDENTIFIER  shift, and go to state 101

    statement    go to state 181
    declaration  go to state 27


State 172

   83 factor: LOG '(' value ',' value • ')'

    ')'  shift, and go to state 182


State 173

   75 init: '=' • value
   76     | '=' • expression

    SCAN         shift, and go to state 69
    LOG          shift, and go to state 70
    TRUE         shift, and go to state 71
    FALSE        shift, and go to state 72
    INTEGER      shift, and go to state 73
    FLOAT        shift, and go to state 74
    STRINGVALUE  shift, and go to state 75
    IDENTIFIER   shift, and go to state 76
    '('          shift, and go to state 77

    expression  go to state 183
    term        go to state 79
    factor      go to state 80
    base        go to state 81
    number      go to state 82
    value       go to state 184


State 174

   65 statement: declaration IDENTIFIER $@16 ':' datatype $@17 init •

    $default  reduce using rule 65 (statement)


State 175

    6 imports: IMPORT '{' modules '}' AS IDENTIFIER FROM STRINGVALUE ';' •

    $default  reduce using rule 6 (imports)


State 176

   25 block: IF $@4 '(' condition ')' $@5 '{' body • '}' $@6 else

    '}'  shift, and go to state 185


State 177

   19 block: WHILE $@1 '(' condition ')' $@2 '{' body • '}'

    '}'  shift, and go to state 186


State 178

   46 parameter: IDENTIFIER $@11 ':' • datatype $@12

    NUMBERTYPE   shift, and go to state 142
    STRINGTYPE   shift, and go to state 143
    BOOLEANTYPE  shift, and go to state 144

    datatype  go to state 187


State 179

   34 function: FUNCTION $@8 IDENTIFIER $@9 '(' parameterList ')' '{' • body return '}'

    CONSOLELOG  shift, and go to state 11
    IF          shift, and go to state 12
    WHILE       shift, and go to state 13
    LET         shift, and go to state 14
    VAR         shift, and go to state 15
    CONST       shift, and go to state 16
    FUNCTION    shift, and go to state 17
    INC         shift, and go to state 18
    DEC         shift, and go to state 19
    FOR         shift, and go to state 20
    IDENTIFIER  shift, and go to state 21

    $default  reduce using rule 14 (body)

    body         go to state 188
    block        go to state 23
    function     go to state 24
    procedure    go to state 25
    statement    go to state 26
    declaration  go to state 27


State 180

   41 parameterList: parameter ',' parameterList •

    $default  reduce using rule 41 (parameterList)


State 181

   21 block: FOR $@3 '(' statement ';' condition ';' statement • ')' '{' body '}'

    ')'  shift, and go to state 189


State 182

   83 factor: LOG '(' value ',' value ')' •

    $default  reduce using rule 83 (factor)


State 183

   76 init: '=' expression •
   78 expression: expression • addops term

    ADD  shift, and go to state 111
    SUB  shift, and go to state 112

    $default  reduce using rule 76 (init)

    addops  go to state 113


State 184

   75 init: '=' value •
   85 base: value •

    ';'       reduce using rule 75 (init)
    ';'       [reduce using rule 85 (base)]
    ')'       reduce using rule 75 (init)
    ')'       [reduce using rule 85 (base)]
    $default  reduce using rule 85 (base)


State 185

   25 block: IF $@4 '(' condition ')' $@5 '{' body '}' • $@6 else

    $default  reduce using rule 24 ($@6)

    $@6  go to state 190


State 186

   19 block: WHILE $@1 '(' condition ')' $@2 '{' body '}' •

    $default  reduce using rule 19 (block)


State 187

   46 parameter: IDENTIFIER $@11 ':' datatype • $@12

    $default  reduce using rule 45 ($@12)

    $@12  go to state 191


State 188

   34 function: FUNCTION $@8 IDENTIFIER $@9 '(' parameterList ')' '{' body • return '}'

    RETURN  shift, and go to state 192

    $default  reduce using rule 111 (return)

    return  go to state 193


State 189

   21 block: FOR $@3 '(' statement ';' condition ';' statement ')' • '{' body '}'

    '{'  shift, and go to state 194


State 190

   25 block: IF $@4 '(' condition ')' $@5 '{' body '}' $@6 • else

    ELSE  shift, and go to state 195

    $default  reduce using rule 52 (else)

    else  go to state 196


State 191

   46 parameter: IDENTIFIER $@11 ':' datatype $@12 •

    $default  reduce using rule 46 (parameter)


State 192

  110 return: RETURN • $@21 value ';'

    $default  reduce using rule 109 ($@21)

    $@21  go to state 197


State 193

   34 function: FUNCTION $@8 IDENTIFIER $@9 '(' parameterList ')' '{' body return • '}'

    '}'  shift, and go to state 198


State 194

   21 block: FOR $@3 '(' statement ';' condition ';' statement ')' '{' • body '}'

    CONSOLELOG  shift, and go to state 11
    IF          shift, and go to state 12
    WHILE       shift, and go to state 13
    LET         shift, and go to state 14
    VAR         shift, and go to state 15
    CONST       shift, and go to state 16
    FUNCTION    shift, and go to state 17
    INC         shift, and go to state 18
    DEC         shift, and go to state 19
    FOR         shift, and go to state 20
    IDENTIFIER  shift, and go to state 21

    $default  reduce using rule 14 (body)

    body         go to state 199
    block        go to state 23
    function     go to state 24
    procedure    go to state 25
    statement    go to state 26
    declaration  go to state 27


State 195

   51 else: ELSE • $@13 '{' body '}'

    $default  reduce using rule 50 ($@13)

    $@13  go to state 200


State 196

   25 block: IF $@4 '(' condition ')' $@5 '{' body '}' $@6 else •

    $default  reduce using rule 25 (block)


State 197

  110 return: RETURN $@21 • value ';'

    SCAN         shift, and go to state 69
    TRUE         shift, and go to state 71
    FALSE        shift, and go to state 72
    INTEGER      shift, and go to state 73
    FLOAT        shift, and go to state 74
    STRINGVALUE  shift, and go to state 75
    IDENTIFIER   shift, and go to state 76

    number  go to state 82
    value   go to state 201


State 198

   34 function: FUNCTION $@8 IDENTIFIER $@9 '(' parameterList ')' '{' body return '}' •

    $default  reduce using rule 34 (function)


State 199

   21 block: FOR $@3 '(' statement ';' condition ';' statement ')' '{' body • '}'

    '}'  shift, and go to state 202


State 200

   51 else: ELSE $@13 • '{' body '}'

    '{'  shift, and go to state 203


State 201

  110 return: RETURN $@21 value • ';'

    ';'  shift, and go to state 204


State 202

   21 block: FOR $@3 '(' statement ';' condition ';' statement ')' '{' body '}' •

    $default  reduce using rule 21 (block)


State 203

   51 else: ELSE $@13 '{' • body '}'

    CONSOLELOG  shift, and go to state 11
    IF          shift, and go to state 12
    WHILE       shift, and go to state 13
    LET         shift, and go to state 14
    VAR         shift, and go to state 15
    CONST       shift, and go to state 16
    FUNCTION    shift, and go to state 17
    INC         shift, and go to state 18
    DEC         shift, and go to state 19
    FOR         shift, and go to state 20
    IDENTIFIER  shift, and go to state 21

    $default  reduce using rule 14 (body)

    body         go to state 205
    block        go to state 23
    function     go to state 24
    procedure    go to state 25
    statement    go to state 26
    declaration  go to state 27


State 204

  110 return: RETURN $@21 value ';' •

    $default  reduce using rule 110 (return)


State 205

   51 else: ELSE $@13 '{' body • '}'

    '}'  shift, and go to state 206


State 206

   51 else: ELSE $@13 '{' body '}' •

    $default  reduce using rule 51 (else)
