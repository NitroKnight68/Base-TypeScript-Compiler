Terminals unused in grammar

    ELIF


State 4 conflicts: 9 reduce/reduce
State 26 conflicts: 1 shift/reduce
State 42 conflicts: 1 shift/reduce
State 76 conflicts: 1 reduce/reduce
State 77 conflicts: 1 reduce/reduce
State 80 conflicts: 3 reduce/reduce
State 81 conflicts: 3 reduce/reduce
State 129 conflicts: 2 shift/reduce
State 155 conflicts: 1 reduce/reduce


Grammar

    0 $accept: main $end

    1 main: importList body

    2 importList: imports importList
    3           | imports
    4           | ε

    5 imports: IMPORT '{' moduleList '}' FROM STRINGVALUE ';'
    6        | IMPORT '{' modules '}' AS IDENTIFIER FROM STRINGVALUE ';'
    7        | IMPORT moduleList FROM STRINGVALUE ';'
    8        | IMPORT modules AS IDENTIFIER FROM STRINGVALUE ';'

    9 moduleList: moduleList ',' moduleList
   10           | modules

   11 modules: IDENTIFIER
   12        | MULT

   13 body: block body
   14     | ε

   15 block: function

   16 $@1: ε

   17 block: WHILE $@1 '(' condition ')' '{' body '}'

   18 $@2: ε

   19 block: IF $@2 '(' condition ')' '{' body '}' else
   20      | statement ';'

   21 $@3: ε

   22 block: CONSOLELOG $@3 '(' console_outputs ')' ';'

   23 console_outputs: STRINGVALUE
   24                | IDENTIFIER
   25                | expression

   26 $@4: ε

   27 $@5: ε

   28 function: FUNCTION $@4 IDENTIFIER $@5 '(' parameterList ')' '{' body return '}'

   29 parameterList: parameter ',' parameterList
   30              | parameter
   31              | ε

   32 $@6: ε

   33 $@7: ε

   34 parameter: IDENTIFIER $@6 ':' datatype $@7

   35 datatype: NUMBERTYPE
   36         | STRINGTYPE
   37         | BOOLEANTYPE

   38 $@8: ε

   39 else: ELSE $@8 '{' body '}'
   40     | ε

   41 condition: condition and_or condition
   42          | value relop value
   43          | value

   44 $@9: ε

   45 condition: TRUE $@9

   46 $@10: ε

   47 condition: FALSE $@10

   48 $@11: ε

   49 $@12: ε

   50 statement: declaration IDENTIFIER $@11 ':' datatype $@12 init
   51          | IDENTIFIER '=' expression

   52 $@13: ε

   53 statement: IDENTIFIER $@13 relop expression

   54 declaration: LET
   55            | VAR
   56            | CONST

   57 init: '=' value
   58     | '=' expression
   59     | ε

   60 expression: expression addops term
   61           | term

   62 term: term mulops factor
   63     | factor

   64 factor: base exponent base
   65       | LOG '(' value ',' value ')'
   66       | base

   67 base: value
   68     | '(' expression ')'

   69 and_or: AND
   70       | OR

   71 exponent: POW

   72 mulops: MULT
   73       | DIV

   74 addops: ADD
   75       | SUB

   76 relop: LT
   77      | GT
   78      | LE
   79      | GE
   80      | EQ
   81      | NE

   82 number: INTEGER
   83       | FLOAT

   84 value: number
   85      | IDENTIFIER
   86      | STRINGVALUE

   87 $@14: ε

   88 value: TRUE $@14

   89 $@15: ε

   90 value: FALSE $@15

   91 $@16: ε

   92 value: SCAN $@16 '(' ')'

   93 $@17: ε

   94 return: RETURN $@17 value ';'
   95       | ε


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 17 19 22 28 65 68 92
    ')' (41) 17 19 22 28 65 68 92
    ',' (44) 9 29 65
    ':' (58) 34 50
    ';' (59) 5 6 7 8 20 22 94
    '=' (61) 51 57 58
    '{' (123) 5 6 17 19 28 39
    '}' (125) 5 6 17 19 28 39
    error (256)
    IMPORT <treeNode> (258) 5 6 7 8
    FROM <treeNode> (259) 5 6 7 8
    AS <treeNode> (260) 6 8
    CONSOLELOG <treeNode> (261) 22
    SCAN <treeNode> (262) 92
    IF <treeNode> (263) 19
    WHILE <treeNode> (264) 17
    ELSE <treeNode> (265) 39
    RETURN <treeNode> (266) 94
    ELIF <treeNode> (267)
    LET <treeNode> (268) 54
    VAR <treeNode> (269) 55
    CONST <treeNode> (270) 56
    ADD <treeNode> (271) 74
    SUB <treeNode> (272) 75
    MULT <treeNode> (273) 12 72
    DIV <treeNode> (274) 73
    LOG <treeNode> (275) 65
    GE <treeNode> (276) 79
    LE <treeNode> (277) 78
    GT <treeNode> (278) 77
    LT <treeNode> (279) 76
    EQ <treeNode> (280) 80
    NE <treeNode> (281) 81
    TRUE <treeNode> (282) 45 88
    FALSE <treeNode> (283) 47 90
    AND <treeNode> (284) 69
    OR <treeNode> (285) 70
    NUMBERTYPE <treeNode> (286) 35
    STRINGTYPE <treeNode> (287) 36
    BOOLEANTYPE <treeNode> (288) 37
    FUNCTION <treeNode> (289) 28
    INTEGER <treeNode> (290) 82
    FLOAT <treeNode> (291) 83
    STRINGVALUE <treeNode> (292) 5 6 7 8 23 86
    POW <treeNode2> (293) 71
    IDENTIFIER <treeNode2> (294) 6 8 11 24 28 34 50 51 53 85


Nonterminals, with rules where they appear

    $accept (48)
        on left: 0
    main <treeNode> (49)
        on left: 1
        on right: 0
    importList <treeNode> (50)
        on left: 2 3 4
        on right: 1 2
    imports <treeNode> (51)
        on left: 5 6 7 8
        on right: 2 3
    moduleList <treeNode> (52)
        on left: 9 10
        on right: 5 7 9
    modules <treeNode> (53)
        on left: 11 12
        on right: 6 8 10
    body <treeNode> (54)
        on left: 13 14
        on right: 1 13 17 19 28 39
    block <treeNode> (55)
        on left: 15 17 19 20 22
        on right: 13
    $@1 (56)
        on left: 16
        on right: 17
    $@2 (57)
        on left: 18
        on right: 19
    $@3 (58)
        on left: 21
        on right: 22
    console_outputs <treeNode> (59)
        on left: 23 24 25
        on right: 22
    function <treeNode2> (60)
        on left: 28
        on right: 15
    $@4 (61)
        on left: 26
        on right: 28
    $@5 (62)
        on left: 27
        on right: 28
    parameterList <treeNode> (63)
        on left: 29 30 31
        on right: 28 29
    parameter <treeNode> (64)
        on left: 34
        on right: 29 30
    $@6 (65)
        on left: 32
        on right: 34
    $@7 (66)
        on left: 33
        on right: 34
    datatype <treeNode> (67)
        on left: 35 36 37
        on right: 34 50
    else <treeNode> (68)
        on left: 39 40
        on right: 19
    $@8 (69)
        on left: 38
        on right: 39
    condition <treeNode> (70)
        on left: 41 42 43 45 47
        on right: 17 19 41
    $@9 (71)
        on left: 44
        on right: 45
    $@10 (72)
        on left: 46
        on right: 47
    statement <treeNode> (73)
        on left: 50 51 53
        on right: 20
    $@11 (74)
        on left: 48
        on right: 50
    $@12 (75)
        on left: 49
        on right: 50
    $@13 (76)
        on left: 52
        on right: 53
    declaration <treeNode> (77)
        on left: 54 55 56
        on right: 50
    init <treeNode2> (78)
        on left: 57 58 59
        on right: 50
    expression <treeNode2> (79)
        on left: 60 61
        on right: 25 51 53 58 60 68
    term <treeNode2> (80)
        on left: 62 63
        on right: 60 61 62
    factor <treeNode2> (81)
        on left: 64 65 66
        on right: 62 63
    base <treeNode2> (82)
        on left: 67 68
        on right: 64 66
    and_or <treeNode> (83)
        on left: 69 70
        on right: 41
    exponent <treeNode2> (84)
        on left: 71
        on right: 64
    mulops <treeNode> (85)
        on left: 72 73
        on right: 62
    addops <treeNode> (86)
        on left: 74 75
        on right: 60
    relop <treeNode> (87)
        on left: 76 77 78 79 80 81
        on right: 42 53
    number <treeNode2> (88)
        on left: 82 83
        on right: 84
    value <treeNode2> (89)
        on left: 84 85 86 88 90 92
        on right: 42 43 57 65 67 94
    $@14 (90)
        on left: 87
        on right: 88
    $@15 (91)
        on left: 89
        on right: 90
    $@16 (92)
        on left: 91
        on right: 92
    return <treeNode> (93)
        on left: 94 95
        on right: 28
    $@17 (94)
        on left: 93
        on right: 94


State 0

    0 $accept: • main $end

    IMPORT  shift, and go to state 1

    $default  reduce using rule 4 (importList)

    main        go to state 2
    importList  go to state 3
    imports     go to state 4


State 1

    5 imports: IMPORT • '{' moduleList '}' FROM STRINGVALUE ';'
    6        | IMPORT • '{' modules '}' AS IDENTIFIER FROM STRINGVALUE ';'
    7        | IMPORT • moduleList FROM STRINGVALUE ';'
    8        | IMPORT • modules AS IDENTIFIER FROM STRINGVALUE ';'

    MULT        shift, and go to state 5
    IDENTIFIER  shift, and go to state 6
    '{'         shift, and go to state 7

    moduleList  go to state 8
    modules     go to state 9


State 2

    0 $accept: main • $end

    $end  shift, and go to state 10


State 3

    1 main: importList • body

    CONSOLELOG  shift, and go to state 11
    IF          shift, and go to state 12
    WHILE       shift, and go to state 13
    LET         shift, and go to state 14
    VAR         shift, and go to state 15
    CONST       shift, and go to state 16
    FUNCTION    shift, and go to state 17
    IDENTIFIER  shift, and go to state 18

    $default  reduce using rule 14 (body)

    body         go to state 19
    block        go to state 20
    function     go to state 21
    statement    go to state 22
    declaration  go to state 23


State 4

    2 importList: imports • importList
    3           | imports •

    IMPORT  shift, and go to state 1

    $end        reduce using rule 3 (importList)
    $end        [reduce using rule 4 (importList)]
    CONSOLELOG  reduce using rule 3 (importList)
    CONSOLELOG  [reduce using rule 4 (importList)]
    IF          reduce using rule 3 (importList)
    IF          [reduce using rule 4 (importList)]
    WHILE       reduce using rule 3 (importList)
    WHILE       [reduce using rule 4 (importList)]
    LET         reduce using rule 3 (importList)
    LET         [reduce using rule 4 (importList)]
    VAR         reduce using rule 3 (importList)
    VAR         [reduce using rule 4 (importList)]
    CONST       reduce using rule 3 (importList)
    CONST       [reduce using rule 4 (importList)]
    FUNCTION    reduce using rule 3 (importList)
    FUNCTION    [reduce using rule 4 (importList)]
    IDENTIFIER  reduce using rule 3 (importList)
    IDENTIFIER  [reduce using rule 4 (importList)]
    $default    reduce using rule 3 (importList)

    importList  go to state 24
    imports     go to state 4


State 5

   12 modules: MULT •

    $default  reduce using rule 12 (modules)


State 6

   11 modules: IDENTIFIER •

    $default  reduce using rule 11 (modules)


State 7

    5 imports: IMPORT '{' • moduleList '}' FROM STRINGVALUE ';'
    6        | IMPORT '{' • modules '}' AS IDENTIFIER FROM STRINGVALUE ';'

    MULT        shift, and go to state 5
    IDENTIFIER  shift, and go to state 6

    moduleList  go to state 25
    modules     go to state 26


State 8

    7 imports: IMPORT moduleList • FROM STRINGVALUE ';'
    9 moduleList: moduleList • ',' moduleList

    FROM  shift, and go to state 27
    ','   shift, and go to state 28


State 9

    8 imports: IMPORT modules • AS IDENTIFIER FROM STRINGVALUE ';'
   10 moduleList: modules •

    AS  shift, and go to state 29

    $default  reduce using rule 10 (moduleList)


State 10

    0 $accept: main $end •

    $default  accept


State 11

   22 block: CONSOLELOG • $@3 '(' console_outputs ')' ';'

    $default  reduce using rule 21 ($@3)

    $@3  go to state 30


State 12

   19 block: IF • $@2 '(' condition ')' '{' body '}' else

    $default  reduce using rule 18 ($@2)

    $@2  go to state 31


State 13

   17 block: WHILE • $@1 '(' condition ')' '{' body '}'

    $default  reduce using rule 16 ($@1)

    $@1  go to state 32


State 14

   54 declaration: LET •

    $default  reduce using rule 54 (declaration)


State 15

   55 declaration: VAR •

    $default  reduce using rule 55 (declaration)


State 16

   56 declaration: CONST •

    $default  reduce using rule 56 (declaration)


State 17

   28 function: FUNCTION • $@4 IDENTIFIER $@5 '(' parameterList ')' '{' body return '}'

    $default  reduce using rule 26 ($@4)

    $@4  go to state 33


State 18

   51 statement: IDENTIFIER • '=' expression
   53          | IDENTIFIER • $@13 relop expression

    '='  shift, and go to state 34

    $default  reduce using rule 52 ($@13)

    $@13  go to state 35


State 19

    1 main: importList body •

    $default  reduce using rule 1 (main)


State 20

   13 body: block • body

    CONSOLELOG  shift, and go to state 11
    IF          shift, and go to state 12
    WHILE       shift, and go to state 13
    LET         shift, and go to state 14
    VAR         shift, and go to state 15
    CONST       shift, and go to state 16
    FUNCTION    shift, and go to state 17
    IDENTIFIER  shift, and go to state 18

    $default  reduce using rule 14 (body)

    body         go to state 36
    block        go to state 20
    function     go to state 21
    statement    go to state 22
    declaration  go to state 23


State 21

   15 block: function •

    $default  reduce using rule 15 (block)


State 22

   20 block: statement • ';'

    ';'  shift, and go to state 37


State 23

   50 statement: declaration • IDENTIFIER $@11 ':' datatype $@12 init

    IDENTIFIER  shift, and go to state 38


State 24

    2 importList: imports importList •

    $default  reduce using rule 2 (importList)


State 25

    5 imports: IMPORT '{' moduleList • '}' FROM STRINGVALUE ';'
    9 moduleList: moduleList • ',' moduleList

    '}'  shift, and go to state 39
    ','  shift, and go to state 28


State 26

    6 imports: IMPORT '{' modules • '}' AS IDENTIFIER FROM STRINGVALUE ';'
   10 moduleList: modules •

    '}'  shift, and go to state 40

    '}'       [reduce using rule 10 (moduleList)]
    $default  reduce using rule 10 (moduleList)


State 27

    7 imports: IMPORT moduleList FROM • STRINGVALUE ';'

    STRINGVALUE  shift, and go to state 41


State 28

    9 moduleList: moduleList ',' • moduleList

    MULT        shift, and go to state 5
    IDENTIFIER  shift, and go to state 6

    moduleList  go to state 42
    modules     go to state 43


State 29

    8 imports: IMPORT modules AS • IDENTIFIER FROM STRINGVALUE ';'

    IDENTIFIER  shift, and go to state 44


State 30

   22 block: CONSOLELOG $@3 • '(' console_outputs ')' ';'

    '('  shift, and go to state 45


State 31

   19 block: IF $@2 • '(' condition ')' '{' body '}' else

    '('  shift, and go to state 46


State 32

   17 block: WHILE $@1 • '(' condition ')' '{' body '}'

    '('  shift, and go to state 47


State 33

   28 function: FUNCTION $@4 • IDENTIFIER $@5 '(' parameterList ')' '{' body return '}'

    IDENTIFIER  shift, and go to state 48


State 34

   51 statement: IDENTIFIER '=' • expression

    SCAN         shift, and go to state 49
    LOG          shift, and go to state 50
    TRUE         shift, and go to state 51
    FALSE        shift, and go to state 52
    INTEGER      shift, and go to state 53
    FLOAT        shift, and go to state 54
    STRINGVALUE  shift, and go to state 55
    IDENTIFIER   shift, and go to state 56
    '('          shift, and go to state 57

    expression  go to state 58
    term        go to state 59
    factor      go to state 60
    base        go to state 61
    number      go to state 62
    value       go to state 63


State 35

   53 statement: IDENTIFIER $@13 • relop expression

    GE  shift, and go to state 64
    LE  shift, and go to state 65
    GT  shift, and go to state 66
    LT  shift, and go to state 67
    EQ  shift, and go to state 68
    NE  shift, and go to state 69

    relop  go to state 70


State 36

   13 body: block body •

    $default  reduce using rule 13 (body)


State 37

   20 block: statement ';' •

    $default  reduce using rule 20 (block)


State 38

   50 statement: declaration IDENTIFIER • $@11 ':' datatype $@12 init

    $default  reduce using rule 48 ($@11)

    $@11  go to state 71


State 39

    5 imports: IMPORT '{' moduleList '}' • FROM STRINGVALUE ';'

    FROM  shift, and go to state 72


State 40

    6 imports: IMPORT '{' modules '}' • AS IDENTIFIER FROM STRINGVALUE ';'

    AS  shift, and go to state 73


State 41

    7 imports: IMPORT moduleList FROM STRINGVALUE • ';'

    ';'  shift, and go to state 74


State 42

    9 moduleList: moduleList • ',' moduleList
    9           | moduleList ',' moduleList •

    ','  shift, and go to state 28

    ','       [reduce using rule 9 (moduleList)]
    $default  reduce using rule 9 (moduleList)


State 43

   10 moduleList: modules •

    $default  reduce using rule 10 (moduleList)


State 44

    8 imports: IMPORT modules AS IDENTIFIER • FROM STRINGVALUE ';'

    FROM  shift, and go to state 75


State 45

   22 block: CONSOLELOG $@3 '(' • console_outputs ')' ';'

    SCAN         shift, and go to state 49
    LOG          shift, and go to state 50
    TRUE         shift, and go to state 51
    FALSE        shift, and go to state 52
    INTEGER      shift, and go to state 53
    FLOAT        shift, and go to state 54
    STRINGVALUE  shift, and go to state 76
    IDENTIFIER   shift, and go to state 77
    '('          shift, and go to state 57

    console_outputs  go to state 78
    expression       go to state 79
    term             go to state 59
    factor           go to state 60
    base             go to state 61
    number           go to state 62
    value            go to state 63


State 46

   19 block: IF $@2 '(' • condition ')' '{' body '}' else

    SCAN         shift, and go to state 49
    TRUE         shift, and go to state 80
    FALSE        shift, and go to state 81
    INTEGER      shift, and go to state 53
    FLOAT        shift, and go to state 54
    STRINGVALUE  shift, and go to state 55
    IDENTIFIER   shift, and go to state 56

    condition  go to state 82
    number     go to state 62
    value      go to state 83


State 47

   17 block: WHILE $@1 '(' • condition ')' '{' body '}'

    SCAN         shift, and go to state 49
    TRUE         shift, and go to state 80
    FALSE        shift, and go to state 81
    INTEGER      shift, and go to state 53
    FLOAT        shift, and go to state 54
    STRINGVALUE  shift, and go to state 55
    IDENTIFIER   shift, and go to state 56

    condition  go to state 84
    number     go to state 62
    value      go to state 83


State 48

   28 function: FUNCTION $@4 IDENTIFIER • $@5 '(' parameterList ')' '{' body return '}'

    $default  reduce using rule 27 ($@5)

    $@5  go to state 85


State 49

   92 value: SCAN • $@16 '(' ')'

    $default  reduce using rule 91 ($@16)

    $@16  go to state 86


State 50

   65 factor: LOG • '(' value ',' value ')'

    '('  shift, and go to state 87


State 51

   88 value: TRUE • $@14

    $default  reduce using rule 87 ($@14)

    $@14  go to state 88


State 52

   90 value: FALSE • $@15

    $default  reduce using rule 89 ($@15)

    $@15  go to state 89


State 53

   82 number: INTEGER •

    $default  reduce using rule 82 (number)


State 54

   83 number: FLOAT •

    $default  reduce using rule 83 (number)


State 55

   86 value: STRINGVALUE •

    $default  reduce using rule 86 (value)


State 56

   85 value: IDENTIFIER •

    $default  reduce using rule 85 (value)


State 57

   68 base: '(' • expression ')'

    SCAN         shift, and go to state 49
    LOG          shift, and go to state 50
    TRUE         shift, and go to state 51
    FALSE        shift, and go to state 52
    INTEGER      shift, and go to state 53
    FLOAT        shift, and go to state 54
    STRINGVALUE  shift, and go to state 55
    IDENTIFIER   shift, and go to state 56
    '('          shift, and go to state 57

    expression  go to state 90
    term        go to state 59
    factor      go to state 60
    base        go to state 61
    number      go to state 62
    value       go to state 63


State 58

   51 statement: IDENTIFIER '=' expression •
   60 expression: expression • addops term

    ADD  shift, and go to state 91
    SUB  shift, and go to state 92

    $default  reduce using rule 51 (statement)

    addops  go to state 93


State 59

   61 expression: term •
   62 term: term • mulops factor

    MULT  shift, and go to state 94
    DIV   shift, and go to state 95

    $default  reduce using rule 61 (expression)

    mulops  go to state 96


State 60

   63 term: factor •

    $default  reduce using rule 63 (term)


State 61

   64 factor: base • exponent base
   66       | base •

    POW  shift, and go to state 97

    $default  reduce using rule 66 (factor)

    exponent  go to state 98


State 62

   84 value: number •

    $default  reduce using rule 84 (value)


State 63

   67 base: value •

    $default  reduce using rule 67 (base)


State 64

   79 relop: GE •

    $default  reduce using rule 79 (relop)


State 65

   78 relop: LE •

    $default  reduce using rule 78 (relop)


State 66

   77 relop: GT •

    $default  reduce using rule 77 (relop)


State 67

   76 relop: LT •

    $default  reduce using rule 76 (relop)


State 68

   80 relop: EQ •

    $default  reduce using rule 80 (relop)


State 69

   81 relop: NE •

    $default  reduce using rule 81 (relop)


State 70

   53 statement: IDENTIFIER $@13 relop • expression

    SCAN         shift, and go to state 49
    LOG          shift, and go to state 50
    TRUE         shift, and go to state 51
    FALSE        shift, and go to state 52
    INTEGER      shift, and go to state 53
    FLOAT        shift, and go to state 54
    STRINGVALUE  shift, and go to state 55
    IDENTIFIER   shift, and go to state 56
    '('          shift, and go to state 57

    expression  go to state 99
    term        go to state 59
    factor      go to state 60
    base        go to state 61
    number      go to state 62
    value       go to state 63


State 71

   50 statement: declaration IDENTIFIER $@11 • ':' datatype $@12 init

    ':'  shift, and go to state 100


State 72

    5 imports: IMPORT '{' moduleList '}' FROM • STRINGVALUE ';'

    STRINGVALUE  shift, and go to state 101


State 73

    6 imports: IMPORT '{' modules '}' AS • IDENTIFIER FROM STRINGVALUE ';'

    IDENTIFIER  shift, and go to state 102


State 74

    7 imports: IMPORT moduleList FROM STRINGVALUE ';' •

    $default  reduce using rule 7 (imports)


State 75

    8 imports: IMPORT modules AS IDENTIFIER FROM • STRINGVALUE ';'

    STRINGVALUE  shift, and go to state 103


State 76

   23 console_outputs: STRINGVALUE •
   86 value: STRINGVALUE •

    ')'       reduce using rule 23 (console_outputs)
    ')'       [reduce using rule 86 (value)]
    $default  reduce using rule 86 (value)


State 77

   24 console_outputs: IDENTIFIER •
   85 value: IDENTIFIER •

    ')'       reduce using rule 24 (console_outputs)
    ')'       [reduce using rule 85 (value)]
    $default  reduce using rule 85 (value)


State 78

   22 block: CONSOLELOG $@3 '(' console_outputs • ')' ';'

    ')'  shift, and go to state 104


State 79

   25 console_outputs: expression •
   60 expression: expression • addops term

    ADD  shift, and go to state 91
    SUB  shift, and go to state 92

    $default  reduce using rule 25 (console_outputs)

    addops  go to state 93


State 80

   45 condition: TRUE • $@9
   88 value: TRUE • $@14

    AND       reduce using rule 44 ($@9)
    AND       [reduce using rule 87 ($@14)]
    OR        reduce using rule 44 ($@9)
    OR        [reduce using rule 87 ($@14)]
    ')'       reduce using rule 44 ($@9)
    ')'       [reduce using rule 87 ($@14)]
    $default  reduce using rule 87 ($@14)

    $@9   go to state 105
    $@14  go to state 88


State 81

   47 condition: FALSE • $@10
   90 value: FALSE • $@15

    AND       reduce using rule 46 ($@10)
    AND       [reduce using rule 89 ($@15)]
    OR        reduce using rule 46 ($@10)
    OR        [reduce using rule 89 ($@15)]
    ')'       reduce using rule 46 ($@10)
    ')'       [reduce using rule 89 ($@15)]
    $default  reduce using rule 89 ($@15)

    $@10  go to state 106
    $@15  go to state 89


State 82

   19 block: IF $@2 '(' condition • ')' '{' body '}' else
   41 condition: condition • and_or condition

    AND  shift, and go to state 107
    OR   shift, and go to state 108
    ')'  shift, and go to state 109

    and_or  go to state 110


State 83

   42 condition: value • relop value
   43          | value •

    GE  shift, and go to state 64
    LE  shift, and go to state 65
    GT  shift, and go to state 66
    LT  shift, and go to state 67
    EQ  shift, and go to state 68
    NE  shift, and go to state 69

    $default  reduce using rule 43 (condition)

    relop  go to state 111


State 84

   17 block: WHILE $@1 '(' condition • ')' '{' body '}'
   41 condition: condition • and_or condition

    AND  shift, and go to state 107
    OR   shift, and go to state 108
    ')'  shift, and go to state 112

    and_or  go to state 110


State 85

   28 function: FUNCTION $@4 IDENTIFIER $@5 • '(' parameterList ')' '{' body return '}'

    '('  shift, and go to state 113


State 86

   92 value: SCAN $@16 • '(' ')'

    '('  shift, and go to state 114


State 87

   65 factor: LOG '(' • value ',' value ')'

    SCAN         shift, and go to state 49
    TRUE         shift, and go to state 51
    FALSE        shift, and go to state 52
    INTEGER      shift, and go to state 53
    FLOAT        shift, and go to state 54
    STRINGVALUE  shift, and go to state 55
    IDENTIFIER   shift, and go to state 56

    number  go to state 62
    value   go to state 115


State 88

   88 value: TRUE $@14 •

    $default  reduce using rule 88 (value)


State 89

   90 value: FALSE $@15 •

    $default  reduce using rule 90 (value)


State 90

   60 expression: expression • addops term
   68 base: '(' expression • ')'

    ADD  shift, and go to state 91
    SUB  shift, and go to state 92
    ')'  shift, and go to state 116

    addops  go to state 93


State 91

   74 addops: ADD •

    $default  reduce using rule 74 (addops)


State 92

   75 addops: SUB •

    $default  reduce using rule 75 (addops)


State 93

   60 expression: expression addops • term

    SCAN         shift, and go to state 49
    LOG          shift, and go to state 50
    TRUE         shift, and go to state 51
    FALSE        shift, and go to state 52
    INTEGER      shift, and go to state 53
    FLOAT        shift, and go to state 54
    STRINGVALUE  shift, and go to state 55
    IDENTIFIER   shift, and go to state 56
    '('          shift, and go to state 57

    term    go to state 117
    factor  go to state 60
    base    go to state 61
    number  go to state 62
    value   go to state 63


State 94

   72 mulops: MULT •

    $default  reduce using rule 72 (mulops)


State 95

   73 mulops: DIV •

    $default  reduce using rule 73 (mulops)


State 96

   62 term: term mulops • factor

    SCAN         shift, and go to state 49
    LOG          shift, and go to state 50
    TRUE         shift, and go to state 51
    FALSE        shift, and go to state 52
    INTEGER      shift, and go to state 53
    FLOAT        shift, and go to state 54
    STRINGVALUE  shift, and go to state 55
    IDENTIFIER   shift, and go to state 56
    '('          shift, and go to state 57

    factor  go to state 118
    base    go to state 61
    number  go to state 62
    value   go to state 63


State 97

   71 exponent: POW •

    $default  reduce using rule 71 (exponent)


State 98

   64 factor: base exponent • base

    SCAN         shift, and go to state 49
    TRUE         shift, and go to state 51
    FALSE        shift, and go to state 52
    INTEGER      shift, and go to state 53
    FLOAT        shift, and go to state 54
    STRINGVALUE  shift, and go to state 55
    IDENTIFIER   shift, and go to state 56
    '('          shift, and go to state 57

    base    go to state 119
    number  go to state 62
    value   go to state 63


State 99

   53 statement: IDENTIFIER $@13 relop expression •
   60 expression: expression • addops term

    ADD  shift, and go to state 91
    SUB  shift, and go to state 92

    $default  reduce using rule 53 (statement)

    addops  go to state 93


State 100

   50 statement: declaration IDENTIFIER $@11 ':' • datatype $@12 init

    NUMBERTYPE   shift, and go to state 120
    STRINGTYPE   shift, and go to state 121
    BOOLEANTYPE  shift, and go to state 122

    datatype  go to state 123


State 101

    5 imports: IMPORT '{' moduleList '}' FROM STRINGVALUE • ';'

    ';'  shift, and go to state 124


State 102

    6 imports: IMPORT '{' modules '}' AS IDENTIFIER • FROM STRINGVALUE ';'

    FROM  shift, and go to state 125


State 103

    8 imports: IMPORT modules AS IDENTIFIER FROM STRINGVALUE • ';'

    ';'  shift, and go to state 126


State 104

   22 block: CONSOLELOG $@3 '(' console_outputs ')' • ';'

    ';'  shift, and go to state 127


State 105

   45 condition: TRUE $@9 •

    $default  reduce using rule 45 (condition)


State 106

   47 condition: FALSE $@10 •

    $default  reduce using rule 47 (condition)


State 107

   69 and_or: AND •

    $default  reduce using rule 69 (and_or)


State 108

   70 and_or: OR •

    $default  reduce using rule 70 (and_or)


State 109

   19 block: IF $@2 '(' condition ')' • '{' body '}' else

    '{'  shift, and go to state 128


State 110

   41 condition: condition and_or • condition

    SCAN         shift, and go to state 49
    TRUE         shift, and go to state 80
    FALSE        shift, and go to state 81
    INTEGER      shift, and go to state 53
    FLOAT        shift, and go to state 54
    STRINGVALUE  shift, and go to state 55
    IDENTIFIER   shift, and go to state 56

    condition  go to state 129
    number     go to state 62
    value      go to state 83


State 111

   42 condition: value relop • value

    SCAN         shift, and go to state 49
    TRUE         shift, and go to state 51
    FALSE        shift, and go to state 52
    INTEGER      shift, and go to state 53
    FLOAT        shift, and go to state 54
    STRINGVALUE  shift, and go to state 55
    IDENTIFIER   shift, and go to state 56

    number  go to state 62
    value   go to state 130


State 112

   17 block: WHILE $@1 '(' condition ')' • '{' body '}'

    '{'  shift, and go to state 131


State 113

   28 function: FUNCTION $@4 IDENTIFIER $@5 '(' • parameterList ')' '{' body return '}'

    IDENTIFIER  shift, and go to state 132

    $default  reduce using rule 31 (parameterList)

    parameterList  go to state 133
    parameter      go to state 134


State 114

   92 value: SCAN $@16 '(' • ')'

    ')'  shift, and go to state 135


State 115

   65 factor: LOG '(' value • ',' value ')'

    ','  shift, and go to state 136


State 116

   68 base: '(' expression ')' •

    $default  reduce using rule 68 (base)


State 117

   60 expression: expression addops term •
   62 term: term • mulops factor

    MULT  shift, and go to state 94
    DIV   shift, and go to state 95

    $default  reduce using rule 60 (expression)

    mulops  go to state 96


State 118

   62 term: term mulops factor •

    $default  reduce using rule 62 (term)


State 119

   64 factor: base exponent base •

    $default  reduce using rule 64 (factor)


State 120

   35 datatype: NUMBERTYPE •

    $default  reduce using rule 35 (datatype)


State 121

   36 datatype: STRINGTYPE •

    $default  reduce using rule 36 (datatype)


State 122

   37 datatype: BOOLEANTYPE •

    $default  reduce using rule 37 (datatype)


State 123

   50 statement: declaration IDENTIFIER $@11 ':' datatype • $@12 init

    $default  reduce using rule 49 ($@12)

    $@12  go to state 137


State 124

    5 imports: IMPORT '{' moduleList '}' FROM STRINGVALUE ';' •

    $default  reduce using rule 5 (imports)


State 125

    6 imports: IMPORT '{' modules '}' AS IDENTIFIER FROM • STRINGVALUE ';'

    STRINGVALUE  shift, and go to state 138


State 126

    8 imports: IMPORT modules AS IDENTIFIER FROM STRINGVALUE ';' •

    $default  reduce using rule 8 (imports)


State 127

   22 block: CONSOLELOG $@3 '(' console_outputs ')' ';' •

    $default  reduce using rule 22 (block)


State 128

   19 block: IF $@2 '(' condition ')' '{' • body '}' else

    CONSOLELOG  shift, and go to state 11
    IF          shift, and go to state 12
    WHILE       shift, and go to state 13
    LET         shift, and go to state 14
    VAR         shift, and go to state 15
    CONST       shift, and go to state 16
    FUNCTION    shift, and go to state 17
    IDENTIFIER  shift, and go to state 18

    $default  reduce using rule 14 (body)

    body         go to state 139
    block        go to state 20
    function     go to state 21
    statement    go to state 22
    declaration  go to state 23


State 129

   41 condition: condition • and_or condition
   41          | condition and_or condition •

    AND  shift, and go to state 107
    OR   shift, and go to state 108

    AND       [reduce using rule 41 (condition)]
    OR        [reduce using rule 41 (condition)]
    $default  reduce using rule 41 (condition)

    and_or  go to state 110


State 130

   42 condition: value relop value •

    $default  reduce using rule 42 (condition)


State 131

   17 block: WHILE $@1 '(' condition ')' '{' • body '}'

    CONSOLELOG  shift, and go to state 11
    IF          shift, and go to state 12
    WHILE       shift, and go to state 13
    LET         shift, and go to state 14
    VAR         shift, and go to state 15
    CONST       shift, and go to state 16
    FUNCTION    shift, and go to state 17
    IDENTIFIER  shift, and go to state 18

    $default  reduce using rule 14 (body)

    body         go to state 140
    block        go to state 20
    function     go to state 21
    statement    go to state 22
    declaration  go to state 23


State 132

   34 parameter: IDENTIFIER • $@6 ':' datatype $@7

    $default  reduce using rule 32 ($@6)

    $@6  go to state 141


State 133

   28 function: FUNCTION $@4 IDENTIFIER $@5 '(' parameterList • ')' '{' body return '}'

    ')'  shift, and go to state 142


State 134

   29 parameterList: parameter • ',' parameterList
   30              | parameter •

    ','  shift, and go to state 143

    $default  reduce using rule 30 (parameterList)


State 135

   92 value: SCAN $@16 '(' ')' •

    $default  reduce using rule 92 (value)


State 136

   65 factor: LOG '(' value ',' • value ')'

    SCAN         shift, and go to state 49
    TRUE         shift, and go to state 51
    FALSE        shift, and go to state 52
    INTEGER      shift, and go to state 53
    FLOAT        shift, and go to state 54
    STRINGVALUE  shift, and go to state 55
    IDENTIFIER   shift, and go to state 56

    number  go to state 62
    value   go to state 144


State 137

   50 statement: declaration IDENTIFIER $@11 ':' datatype $@12 • init

    '='  shift, and go to state 145

    $default  reduce using rule 59 (init)

    init  go to state 146


State 138

    6 imports: IMPORT '{' modules '}' AS IDENTIFIER FROM STRINGVALUE • ';'

    ';'  shift, and go to state 147


State 139

   19 block: IF $@2 '(' condition ')' '{' body • '}' else

    '}'  shift, and go to state 148


State 140

   17 block: WHILE $@1 '(' condition ')' '{' body • '}'

    '}'  shift, and go to state 149


State 141

   34 parameter: IDENTIFIER $@6 • ':' datatype $@7

    ':'  shift, and go to state 150


State 142

   28 function: FUNCTION $@4 IDENTIFIER $@5 '(' parameterList ')' • '{' body return '}'

    '{'  shift, and go to state 151


State 143

   29 parameterList: parameter ',' • parameterList

    IDENTIFIER  shift, and go to state 132

    $default  reduce using rule 31 (parameterList)

    parameterList  go to state 152
    parameter      go to state 134


State 144

   65 factor: LOG '(' value ',' value • ')'

    ')'  shift, and go to state 153


State 145

   57 init: '=' • value
   58     | '=' • expression

    SCAN         shift, and go to state 49
    LOG          shift, and go to state 50
    TRUE         shift, and go to state 51
    FALSE        shift, and go to state 52
    INTEGER      shift, and go to state 53
    FLOAT        shift, and go to state 54
    STRINGVALUE  shift, and go to state 55
    IDENTIFIER   shift, and go to state 56
    '('          shift, and go to state 57

    expression  go to state 154
    term        go to state 59
    factor      go to state 60
    base        go to state 61
    number      go to state 62
    value       go to state 155


State 146

   50 statement: declaration IDENTIFIER $@11 ':' datatype $@12 init •

    $default  reduce using rule 50 (statement)


State 147

    6 imports: IMPORT '{' modules '}' AS IDENTIFIER FROM STRINGVALUE ';' •

    $default  reduce using rule 6 (imports)


State 148

   19 block: IF $@2 '(' condition ')' '{' body '}' • else

    ELSE  shift, and go to state 156

    $default  reduce using rule 40 (else)

    else  go to state 157


State 149

   17 block: WHILE $@1 '(' condition ')' '{' body '}' •

    $default  reduce using rule 17 (block)


State 150

   34 parameter: IDENTIFIER $@6 ':' • datatype $@7

    NUMBERTYPE   shift, and go to state 120
    STRINGTYPE   shift, and go to state 121
    BOOLEANTYPE  shift, and go to state 122

    datatype  go to state 158


State 151

   28 function: FUNCTION $@4 IDENTIFIER $@5 '(' parameterList ')' '{' • body return '}'

    CONSOLELOG  shift, and go to state 11
    IF          shift, and go to state 12
    WHILE       shift, and go to state 13
    LET         shift, and go to state 14
    VAR         shift, and go to state 15
    CONST       shift, and go to state 16
    FUNCTION    shift, and go to state 17
    IDENTIFIER  shift, and go to state 18

    $default  reduce using rule 14 (body)

    body         go to state 159
    block        go to state 20
    function     go to state 21
    statement    go to state 22
    declaration  go to state 23


State 152

   29 parameterList: parameter ',' parameterList •

    $default  reduce using rule 29 (parameterList)


State 153

   65 factor: LOG '(' value ',' value ')' •

    $default  reduce using rule 65 (factor)


State 154

   58 init: '=' expression •
   60 expression: expression • addops term

    ADD  shift, and go to state 91
    SUB  shift, and go to state 92

    $default  reduce using rule 58 (init)

    addops  go to state 93


State 155

   57 init: '=' value •
   67 base: value •

    ';'       reduce using rule 57 (init)
    ';'       [reduce using rule 67 (base)]
    $default  reduce using rule 67 (base)


State 156

   39 else: ELSE • $@8 '{' body '}'

    $default  reduce using rule 38 ($@8)

    $@8  go to state 160


State 157

   19 block: IF $@2 '(' condition ')' '{' body '}' else •

    $default  reduce using rule 19 (block)


State 158

   34 parameter: IDENTIFIER $@6 ':' datatype • $@7

    $default  reduce using rule 33 ($@7)

    $@7  go to state 161


State 159

   28 function: FUNCTION $@4 IDENTIFIER $@5 '(' parameterList ')' '{' body • return '}'

    RETURN  shift, and go to state 162

    $default  reduce using rule 95 (return)

    return  go to state 163


State 160

   39 else: ELSE $@8 • '{' body '}'

    '{'  shift, and go to state 164


State 161

   34 parameter: IDENTIFIER $@6 ':' datatype $@7 •

    $default  reduce using rule 34 (parameter)


State 162

   94 return: RETURN • $@17 value ';'

    $default  reduce using rule 93 ($@17)

    $@17  go to state 165


State 163

   28 function: FUNCTION $@4 IDENTIFIER $@5 '(' parameterList ')' '{' body return • '}'

    '}'  shift, and go to state 166


State 164

   39 else: ELSE $@8 '{' • body '}'

    CONSOLELOG  shift, and go to state 11
    IF          shift, and go to state 12
    WHILE       shift, and go to state 13
    LET         shift, and go to state 14
    VAR         shift, and go to state 15
    CONST       shift, and go to state 16
    FUNCTION    shift, and go to state 17
    IDENTIFIER  shift, and go to state 18

    $default  reduce using rule 14 (body)

    body         go to state 167
    block        go to state 20
    function     go to state 21
    statement    go to state 22
    declaration  go to state 23


State 165

   94 return: RETURN $@17 • value ';'

    SCAN         shift, and go to state 49
    TRUE         shift, and go to state 51
    FALSE        shift, and go to state 52
    INTEGER      shift, and go to state 53
    FLOAT        shift, and go to state 54
    STRINGVALUE  shift, and go to state 55
    IDENTIFIER   shift, and go to state 56

    number  go to state 62
    value   go to state 168


State 166

   28 function: FUNCTION $@4 IDENTIFIER $@5 '(' parameterList ')' '{' body return '}' •

    $default  reduce using rule 28 (function)


State 167

   39 else: ELSE $@8 '{' body • '}'

    '}'  shift, and go to state 169


State 168

   94 return: RETURN $@17 value • ';'

    ';'  shift, and go to state 170


State 169

   39 else: ELSE $@8 '{' body '}' •

    $default  reduce using rule 39 (else)


State 170

   94 return: RETURN $@17 value ';' •

    $default  reduce using rule 94 (return)
